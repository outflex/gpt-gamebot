# bot.py  ‚Äî –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π Telegram-–±–æ—Ç –Ω–∞ aiogram 3.7+
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞: —Ç–æ–ª—å–∫–æ –ö–æ—Å—Ç–∏ (üé≤). –ë–∞—Å–∫–µ—Ç–±–æ–ª —É–¥–∞–ª—ë–Ω / –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
# –•—Ä–∞–Ω–µ–Ω–∏–µ: database.json (—Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º).
#
# –î–æ–±–∞–≤–ª–µ–Ω —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Å–ª–æ–π: –±–∞–ª–∞–Ω—Å, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å—Ç–∞–≤–∫–∏, –∫–æ–º–∏—Å—Å–∏—è, –∏—Å—Ç–æ—Ä–∏—è.
# –í–ê–ñ–ù–û: –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –≤ TOKEN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.

import asyncio
import random
import json
import time
from pathlib import Path
from typing import Dict, Any, List
from datetime import datetime, timedelta, timezone
import threading

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.bot import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import os

DATABASE_URL = os.getenv("DATABASE_URL")


# --------------------------
# –ù–ê–°–¢–†–û–ô–ö–ò
# --------------------------
TOKEN = "8256535045:AAE5V4-t5KpXxnAqY1Mspm_3x78mUOHVYW0"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π
DB_PATH = Path("database.json")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä
DICE_ROUNDS = 6
HOUSE_COMMISSION = 0.10  # 10%
DEFAULT_BET = 100
DAILY_BONUS_AMOUNT = 1000  # —Å—É–º–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
DAILY_BONUS_INTERVAL = 24 * 3600  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ª–æ–∫ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–æ–º (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç race conditions –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)
_db_lock = threading.Lock()

# --------------------------
# –ë–ê–ó–ê (JSON)
# --------------------------
def _init_db_if_needed():
    if not DB_PATH.exists():
        initial = {
            "users": {},
            "lobbies": {},
            "bet_history": [],
            "house_balance": 0
        }
        DB_PATH.write_text(json.dumps(initial, ensure_ascii=False, indent=4), encoding="utf-8")

def cleanup_empty_lobbies(db: Dict[str, Any]):
    to_delete = [lid for lid, lobby in db.get("lobbies", {}).items() if not lobby.get("players")]
    for lid in to_delete:
        del db["lobbies"][lid]

def load_db() -> Dict[str, Any]:
    _init_db_if_needed()
    with _db_lock:
        data = json.loads(DB_PATH.read_text(encoding="utf-8"))
        cleanup_empty_lobbies(data)
        return data

def save_db(data: Dict[str, Any]):
    _init_db_if_needed()
    cleanup_empty_lobbies(data)
    tmp = DB_PATH.with_suffix(".tmp")
    with _db_lock:
        tmp.write_text(json.dumps(data, ensure_ascii=False, indent=4), encoding="utf-8")
        tmp.replace(DB_PATH)

# --------------------------
# –£–¢–ò–õ–ò–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø / –ë–ê–õ–ê–ù–°–´ / –ò–°–¢–û–†–ò–Ø
# --------------------------
def ensure_user(uid: int, name: str):
    db = load_db()
    s = str(uid)
    if s not in db["users"]:
        db["users"][s] = {
    "name": name,
    "balance": 1000,
    "locked": 0,
    "games": 0,
    "wins": 0,
    "dailyBonusClaimed": False,
    "lastBonusTimestamp": None,
    "slot_wins": 0,        # üé∞ —Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –≤—ã–∏–≥—Ä–∞–ª –≤ —Å–ª–æ—Ç–∞—Ö
    "slot_jackpots": 0     # üíé —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã–±–∏–ª –¥–∂–µ–∫–ø–æ—Ç
}
        save_db(db)

def get_user(uid: int) -> Dict[str, Any]:
    db = load_db()
    return db["users"].get(str(uid))

def user_available_balance(uid: int) -> int:
    u = get_user(uid)
    if not u:
        return 0
    return int(u.get("balance", 0) - u.get("locked", 0))

def change_balance_atomic(uid: int, delta: int):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ delta (–ø—Ä–∏–±–∞–≤–∏—Ç—å/–æ—Ç–Ω—è—Ç—å).
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–µ–Ω—è–µ—Ç –ø–æ–ª–µ balance (–∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç locked).
    """
    db = load_db()
    s = str(uid)
    if s not in db["users"]:
        raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    db["users"][s]["balance"] = int(db["users"][s].get("balance", 0) + delta)
    save_db(db)

def inc_locked(uid: int, amount: int):
    db = load_db()
    s = str(uid)
    if s not in db["users"]:
        raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    db["users"][s]["locked"] = int(db["users"][s].get("locked", 0) + amount)
    save_db(db)

def dec_locked(uid: int, amount: int):
    db = load_db()
    s = str(uid)
    if s not in db["users"]:
        raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    cur = int(db["users"][s].get("locked", 0))
    db["users"][s]["locked"] = max(0, cur - int(amount))
    save_db(db)

def add_game_result(uid: int, won: bool):
    db = load_db()
    s = str(uid)
    if s not in db["users"]:
        db["users"][s] = {
            "name": f"User {s}",
            "balance": 1000,
            "locked": 0,
            "games": 0,
            "wins": 0,
            "dailyBonusClaimed": False,
            "lastBonusTimestamp": None
        }
    db["users"][s]["games"] = int(db["users"][s].get("games", 0)) + 1
    if won:
        db["users"][s]["wins"] = int(db["users"][s].get("wins", 0)) + 1
    save_db(db)

def record_bet_history(user_id: int, bet_amount: int, opponent_id: int, outcome: str, profit: int):
    db = load_db()
    entry = {
        "userId": int(user_id),
        "betAmount": int(bet_amount),
        "opponentId": int(opponent_id),
        "outcome": outcome,  # 'win', 'loss', 'draw'
        "profit": int(profit),
        "date": datetime.utcnow().isoformat() + "Z"
    }
    db.setdefault("bet_history", []).append(entry)
    save_db(db)

# --------------------------
# –õ–û–ë–ë–ò: —Å–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥
# --------------------------
def max_players(game: str) -> int:
    return 2 if game == "dice" else 2  # —Å–µ–π—á–∞—Å —Ç–æ–ª—å–∫–æ dice ‚Äî 2 –∏–≥—Ä–æ–∫–∞

def min_players(game: str) -> int:
    return 2

def new_lobby_id() -> str:
    db = load_db()
    while True:
        lid = str(random.randint(100000, 999999))
        if lid not in db["lobbies"]:
            return lid

def create_lobby(game: str, creator_uid: int, bet: int = DEFAULT_BET) -> str:
    db = load_db()
    lid = new_lobby_id()
    db["lobbies"][lid] = {
        "game": game,
        "creator": creator_uid,
        "players": [creator_uid],
        "started": False,
        "bet": int(bet),  # —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –∏–≥—Ä–æ–∫–∞
        "bet_locked": False,
        "game_state": {}
    }
    save_db(db)
    return lid

def join_lobby(lid: str, uid: int) -> (bool, str):
    db = load_db()
    if lid not in db["lobbies"]:
        return False, "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    lobby = db["lobbies"][lid]
    if lobby["started"]:
        return False, "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å"
    if uid in lobby["players"]:
        return False, "–í—ã —É–∂–µ –≤ –ª–æ–±–±–∏"
    if len(lobby["players"]) >= max_players(lobby["game"]):
        return False, "–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
    lobby["players"].append(uid)
    save_db(db)
    return True, "–£—Å–ø–µ—à–Ω–æ"

def leave_lobby(lid: str, uid: int, penalize_if_started: bool = False) -> (bool, str):
    db = load_db()
    if lid not in db["lobbies"]:
        return False, "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    lobby = db["lobbies"][lid]
    if uid in lobby["players"]:
        lobby["players"].remove(uid)
    if penalize_if_started and lobby.get("started", False):
        # –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ —à—Ç—Ä–∞—Ñ–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
        pass
    # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —É–¥–∞–ª—è–µ–º –ª–æ–±–±–∏
    if len(lobby["players"]) == 0:
        del db["lobbies"][lid]
    save_db(db)
    return True, "–í—ã—à–ª–∏"

def kick_from_lobby(lid: str, by_uid: int, target_uid: int) -> (bool, str):
    db = load_db()
    if lid not in db["lobbies"]:
        return False, "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    lobby = db["lobbies"][lid]
    if lobby["creator"] != by_uid:
        return False, "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–∫–∏–¥—ã–≤–∞—Ç—å"
    if target_uid not in lobby["players"]:
        return False, "–ò–≥—Ä–æ–∫ –Ω–µ –≤ –ª–æ–±–±–∏"
    lobby["players"].remove(target_uid)
    save_db(db)
    return True, "–í—ã–≥–Ω–∞–Ω"

def delete_lobby(lid: str):
    db = load_db()
    if lid in db["lobbies"]:
        del db["lobbies"][lid]
        save_db(db)

# --------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–ò UI
# --------------------------
def format_players_list(lobby: Dict[str, Any]) -> str:
    db = load_db()
    lines = []
    for p in lobby["players"]:
        user = db["users"].get(str(p), {"name": f"User {p}", "wins": 0, "balance": 0})
        prefix = "üëë " if p == lobby["creator"] else "‚Ä¢ "
        lines.append(f"{prefix}{user['name']} ‚Äî –±–∞–ª–∞–Ω—Å: {user.get('balance',0)}")
    return "\n".join(lines)

def lobby_overview_text(lid: str, lobby: Dict[str, Any]) -> str:
    lobby_name = lobby.get("name", lid)
    game_name = "–ö–æ—Å—Ç–∏ üé≤"
    bet = lobby.get("bet", DEFAULT_BET)
    text = (
        f"üî∑ <b>–õ–æ–±–±–∏: {lobby_name}</b>\n(ID: {lid})\n"
        f"üéÆ –ò–≥—Ä–∞: {game_name}\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç (—Å –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞)\n"
        f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: {load_db()['users'].get(str(lobby['creator']), {'name': 'Unknown'})['name']}\n\n"
        f"<b>–ò–≥—Ä–æ–∫–∏ ({len(lobby['players'])}/{max_players(lobby['game'])}):</b>\n"
        f"{format_players_list(lobby)}\n\n"
    )
    if not lobby.get("started", False):
        text += "‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è."
    else:
        text += "‚úÖ –ò–≥—Ä–∞ –∏–¥—ë—Ç ‚Äî –∂–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ö–æ–¥–µ —Ä–∞—É–Ω–¥–æ–≤."
    return text

# --------------------------
# UI / –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# --------------------------
def kb_main(uid: int = None):
    kb = InlineKeyboardBuilder()
    kb.button(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play")
    kb.button(text="üíº –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    kb.button(text="üè¨ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
    kb.button(text="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaders")
    kb.button(text="‚ÑπÔ∏è –û–± –∏–≥—Ä–µ", callback_data="about")

    # üü¶ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –ª–æ–±–±–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É
    if uid:
        db = load_db()
        for lid, lobby in db["lobbies"].items():
            if uid in lobby["players"]:
                kb.button(text="üü¶ –ú–æ—ë –ª–æ–±–±–∏", callback_data=f"view_{lid}")
                break

    return kb.adjust(2).as_markup()

def kb_only_back_main():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    return kb.as_markup()

# --------------------------
# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏
# --------------------------
class CreateLobby(StatesGroup):
    waiting_for_name = State()
    waiting_for_bet = State()   # <-- –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏

# --------------------------
# –¢–ï–ö–°–¢ –î–õ–Ø –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
# --------------------------
def main_menu_text(name: str) -> str:
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∫–∞–∑–∏–Ω–æ —Å –∫–æ—Å—Ç—è–º–∏. "
        "–î–µ–ª–∞–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–≤–æ–∏ –ø–æ–±–µ–¥—ã, –≤—ã–∏–≥—Ä—ã–≤–∞–π –∏ —Ç—Ä–∞—Ç—å –∫—ç—à–∏–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (—Å–∫–æ—Ä–æ)! "
        "–í–µ—Ä—Å–∏—è —Å–±–æ—Ä–∫–∏: 0.6 Beta"
    )

def kb_play():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏", callback_data="create_game")
    kb.button(text="üîé –ù–∞–π—Ç–∏ –ª–æ–±–±–∏", callback_data="join_game")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    return kb.adjust(2).as_markup()

def kb_game_types():
    kb = InlineKeyboardBuilder()
    kb.button(text="üé≤ –ö–æ—Å—Ç–∏", callback_data="create_lobby_name")  # üîπ —Ç–µ–ø–µ—Ä—å —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ª–æ–±–±–∏
    kb.button(text="üé∞ –°–ª–æ—Ç—ã", callback_data="slots")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
    return kb.adjust(2).as_markup()

def kb_bet_options():
    kb = InlineKeyboardBuilder()
    bets = [100, 500, 1000, 5000, 10000, 50000, 100000]
    for b in bets:
        kb.button(text=f"{b} –º–æ–Ω–µ—Ç", callback_data=f"create_dice_{b}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="create_game")
    return kb.adjust(2).as_markup()  # üî• –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥

def kb_slot_bets():
    kb = InlineKeyboardBuilder()
    bets = [50, 100, 1000, 10000, 100000, 1000000]
    for b in bets:
        kb.button(text=f"{b} –º–æ–Ω–µ—Ç", callback_data=f"slot_bet_{b}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
    return kb.adjust(2).as_markup()

def kb_lobby_actions(lid: str, uid: int):
    db = load_db()
    if lid not in db["lobbies"]:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
        return kb.adjust(2).as_markup()
    lobby = db["lobbies"][lid]
    kb = InlineKeyboardBuilder()
    if not lobby.get("started", False):
        if uid in lobby["players"]:
            kb.button(text="üîô –í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏", callback_data=f"leave_{lid}")
        if uid == lobby["creator"]:
            kb.button(text="üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"start_{lid}")
            kb.button(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–∞–º–∏", callback_data=f"manage_{lid}")
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
    else:
        kb.button(text="üö™ –í—ã–π—Ç–∏ (–ø—Ä–µ—Ä–≤–∞—Ç—å –º–∞—Ç—á)", callback_data=f"leave_in_game_{lid}")
    return kb.adjust(2).as_markup()

# --------------------------
# –ë–û–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (aiogram 3.7+)
# --------------------------
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã –º–µ–Ω—é
# --------------------------
@dp.message(F.text == "/start")
async def cmd_start(msg: Message):
    ensure_user(msg.from_user.id, msg.from_user.full_name)
    # –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø—Ä–∏–≤–µ—Ç —Å "—Å—Ç–∏–∫–µ—Ä–æ–º" (—ç–º–æ–¥–∑–∏)
    await msg.answer(main_menu_text(msg.from_user.full_name), reply_markup=kb_main(msg.from_user.id))

@dp.callback_query(F.data == "back_main")
async def cb_back_main(c: CallbackQuery):
     await c.message.edit_text(main_menu_text(c.from_user.full_name), reply_markup=kb_main(c.from_user.id))

@dp.callback_query(F.data == "play")
async def cb_play(c: CallbackQuery):
    await c.message.edit_text("üéÆ –ú–µ–Ω—é –∏–≥—Ä - –≤—ã–±–∏—Ä–∞–π:", reply_markup=kb_play())

@dp.callback_query(F.data == "create_game")
async def cb_create_game(c: CallbackQuery):
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=kb_game_types())
    
@dp.callback_query(F.data == "choose_dice_bet")
async def cb_choose_dice_bet(c: CallbackQuery):
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏:", reply_markup=kb_bet_options())
    
@dp.callback_query(F.data == "create_lobby_name")
async def cb_create_lobby_name(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ª–æ–±–±–∏:")
    await state.set_state(CreateLobby.waiting_for_name)
    
@dp.message(CreateLobby.waiting_for_name)
async def process_lobby_name(msg: Message, state: FSMContext):
    lobby_name = msg.text.strip()
    if not lobby_name:
        await msg.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ FSM
    await state.update_data(lobby_name=lobby_name)

    # —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É
    await msg.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏:", reply_markup=kb_bet_options())

    # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏
    await state.set_state(CreateLobby.waiting_for_bet)

@dp.callback_query(F.data == "slots")
async def cb_slots(c: CallbackQuery):
    await c.message.edit_text("üé∞ –°–ª–æ—Ç—ã!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:", reply_markup=kb_slot_bets())

@dp.callback_query(F.data.startswith("slot_bet_"))
async def cb_slot_bet(c: CallbackQuery):
    bet = int(c.data.split("_", 2)[2])
    ensure_user(c.from_user.id, c.from_user.full_name)

    # –ø—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å
    if user_available_balance(c.from_user.id) < bet:
        await c.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
        return

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –∏ –∫–ª–∞–¥—ë–º –µ—ë –≤ –¥–æ–º
    change_balance_atomic(c.from_user.id, -bet)
    db = load_db()
    db["house_balance"] = db.get("house_balance", 0) + bet
    save_db(db)

    # –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–ª–æ—Ç–∞ (—á–∏—Å—Ç–æ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—à–∞–µ–º —Å–∞–º–∏)
    try:
        await bot.send_dice(c.from_user.id, emoji="üé∞")
    except Exception:
        pass

    # —Ä–µ—à–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ä—É—á–Ω—É—é –ø–æ —à–∞–Ω—Å–∞–º
    outcome = random.choices(
    population=["lose", "small", "big", "jackpot"],
    weights=[84, 10, 5, 1],  # lose=84%, small=10%, big=5%, jackpot=1%
    k=1
    )[0]

    payout = 0
    jackpot = False
    if outcome == "jackpot":
        payout = bet * 50
        jackpot = True
    elif outcome == "big":
        payout = bet * 10
    elif outcome == "small":
        payout = bet * 2
    # –µ—Å–ª–∏ lose ‚Üí payout = 0

    # –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
    profit = -bet
    if payout > 0:
        change_balance_atomic(c.from_user.id, payout)

        db = load_db()
        db["house_balance"] = max(0, db.get("house_balance", 0) - payout)
        u = db["users"][str(c.from_user.id)]
        u["slot_wins"] = u.get("slot_wins", 0) + payout
        if jackpot:
            u["slot_jackpots"] = u.get("slot_jackpots", 0) + 1
        save_db(db)

        profit = payout - bet
        await c.answer(f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {payout} –º–æ–Ω–µ—Ç!", show_alert=True)
    else:
        await c.answer("üôÉ –£–≤—ã, –ø—É—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë!", show_alert=True)

    # —Å–≤–æ–¥–∫–∞
    db = load_db()
    balance = db["users"][str(c.from_user.id)]["balance"]
    result_text = (
        f"üé∞ –ò—Ç–æ–≥ –∏–≥—Ä—ã:\n"
        f"‚Ä¢ –°—Ç–∞–≤–∫–∞: {bet}\n"
        f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'+' if profit > 0 else ''}{profit}\n"
        f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
        "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?"
    )

    await c.message.answer(result_text, reply_markup=kb_slot_bets())

@dp.callback_query(F.data == "shop")
async def cb_shop(c: CallbackQuery):
    # –ø–æ–∫–∞ –Ω–µ—Ä–∞–±–æ—á–∞—è –≤–∫–ª–∞–¥–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    await c.message.edit_text("üè¨ –ú–∞–≥–∞–∑–∏–Ω ‚Äî –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å –º–æ–Ω–µ—Ç—ã –Ω–∞ –ø—Ä–∏–∫–æ–ª—é—Ö–∏.", reply_markup=kb_only_back_main())

@dp.callback_query(F.data == "leaders")
async def cb_leaders(c: CallbackQuery):
    db = load_db()
    users = list(db["users"].items())
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–∞–Ω—Å—É (—É–±—ã–≤–∞–Ω–∏–µ)
    users.sort(key=lambda x: x[1].get("balance", 0), reverse=True)
    text = "<b>üèÜ –¢–æ–ø –ø–æ –º–æ–Ω–µ—Ç–∞–º</b>\n\n"
    if not users:
        text += "–ü–æ–∫–∞ –ø—É—Å—Ç–æ ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–∞—Ä—Ç–∏—é!"
    else:
        for i, (uid, info) in enumerate(users[:20], 1):
            medal = ""
            if i == 1:
                medal = "ü•á"
            elif i == 2:
                medal = "ü•à"
            elif i == 3:
                medal = "ü•â"
            text += f"{i}. {medal} {info['name']} ‚Äî {info.get('balance',0)} –º–æ–Ω–µ—Ç\n"
    await c.message.edit_text(text, reply_markup=kb_only_back_main())
@dp.callback_query(F.data == "about")
async def cb_about(c: CallbackQuery):
    text = (
        "–í–µ—Ä—Å–∏—è: <b>0.6 Beta</b>\n\n"
        "‚ú® <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ üé∞ –ö–∞–∑–∏–Ω–æ (—Å–ª–æ—Ç—ã) —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ —Å—Ç–∞–≤–∫–∞–º–∏.\n"
        "‚Ä¢ –ü–æ—è–≤–∏–ª–∞—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ—Ç–∞–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ: ¬´–í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ¬ª –∏ ¬´–î–∂–µ–∫–ø–æ—Ç–æ–≤¬ª.\n"
        "‚Ä¢ –õ–æ–±–±–∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–∑—ã–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏.\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
        "‚Ä¢ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äú–¥–æ–º–∞‚Äù).\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ/–≤—Ö–æ–¥ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–±–±–∏.\n"
        "‚Ä¢ –ú–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "üõ† <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</b>\n"
        "‚Ä¢ üè¨ –ú–∞–≥–∞–∑–∏–Ω —Å –ø–æ–∫—É–ø–∫–∞–º–∏ –∑–∞ –º–æ–Ω–µ—Ç—ã\n"
        "‚Ä¢ üéÆ –ù–æ–≤—ã–µ –º–∏–Ω–∏-–∏–≥—Ä—ã\n"
        "‚Ä¢ üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏ —Ä–µ–¥–∫–∏–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏.\n"
        "‚Ä¢ üéÅ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã —Å –æ—Å–æ–±—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏.\n"
        "‚Ä¢ üîß –ú–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ —Ñ–∏–∫—Å—ã.\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å ‚ù§Ô∏è"
    )
    await c.message.edit_text(text, reply_markup=kb_only_back_main())

# --------------------------
# CREATE LOBBY handlers (–ö–æ—Å—Ç–∏)
# --------------------------
@dp.callback_query(F.data.startswith("create_dice_"))
async def cb_create_dice_with_bet(c: CallbackQuery, state: FSMContext):
    bet = int(c.data.split("_", 2)[2])
    data = await state.get_data()
    lobby_name = data["lobby_name"]  # üîπ –Ω–∞–∑–≤–∞–Ω–∏–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û, –±–µ–∑ —Ä–∞–Ω–¥–æ–º–∞

    ensure_user(c.from_user.id, c.from_user.full_name)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞: —É –∏–≥—Ä–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å –ª–æ–±–±–∏
    db = load_db()
    for lid, lobby in db["lobbies"].items():
        if c.from_user.id in lobby["players"]:
            await c.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–±–±–∏!", show_alert=True)
            return

    # —Å–æ–∑–¥–∞—ë–º –ª–æ–±–±–∏ —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
    lid = new_lobby_id()
    db["lobbies"][lid] = {
        "name": lobby_name,
        "game": "dice",
        "creator": c.from_user.id,
        "players": [c.from_user.id],
        "started": False,
        "bet": bet,
        "bet_locked": False,
        "game_state": {}
    }
    save_db(db)

    await c.message.edit_text(
        f"‚úÖ –õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ: <b>{lobby_name}</b>\n"
        f"üÜî ID: {lid}\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç (—Å –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞)\n\n"
        "–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...",
        reply_markup=kb_lobby_actions(lid, c.from_user.id)
    )
    await state.clear()

# --------------------------
# JOIN: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
# --------------------------
@dp.callback_query(F.data == "join_game")
async def cb_list_lobbies(c: CallbackQuery):
    db = load_db()
    text_lines = ["üîé <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–±–±–∏ (–ö–æ—Å—Ç–∏)</b>:\n"]
    kb = InlineKeyboardBuilder()
    found = False

    for lid, lobby in db["lobbies"].items():
        if lobby.get("started", False):
            continue
        found = True
        emoji = "üé≤"
        lobby_name = lobby.get("name", f"–õ–æ–±–±–∏ {lid}")

        text_lines.append(
            f"üî∑ {lobby_name} (ID: {lid}) | {emoji} {lobby['game']} | "
            f"–°—Ç–∞–≤–∫–∞: {lobby.get('bet', DEFAULT_BET)} | "
            f"({len(lobby['players'])}/{max_players(lobby['game'])})"
        )
        kb.button(text=f"‚û°Ô∏è –í–æ–π—Ç–∏ –≤ {lobby_name}", callback_data=f"join_{lid}")

    if not found:
        text_lines.append("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–±–±–∏")

    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
    await c.message.edit_text("\n".join(text_lines), reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("join_"))
async def cb_join_specific(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    ensure_user(c.from_user.id, c.from_user.full_name)
    ok, reason = join_lobby(lid, c.from_user.id)
    if not ok:
        await c.answer(reason, show_alert=True)
        await c.message.edit_text(reason, reply_markup=kb_play())
        return

    # –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å ‚Äî –ø–æ–∫–∞–∂–µ–º –ª–æ–±–±–∏ –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
    db = load_db()
    lobby = db["lobbies"][lid]

    text = (
        f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏ <b>{lid}</b>\n\n"
        f"{lobby_overview_text(lid, lobby)}\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—Ç–∞ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é."
    )
    await c.message.edit_text(text, reply_markup=kb_lobby_actions(lid, c.from_user.id))

    async def notify_joiners(lid_local: str, new_uid: int):
        db_local = load_db()
        if lid_local not in db_local["lobbies"]:
            return
        lobby_local = db_local["lobbies"][lid_local]
        name = db_local["users"].get(str(new_uid), {"name": f"User {new_uid}"})["name"]
        notify_text = f"‚ú® <b>{name}</b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏ <code>{lid_local}</code>!"
        overview = lobby_overview_text(lid_local, lobby_local)
        tasks = []
        for pid in lobby_local["players"]:
            try:
                tasks.append(asyncio.create_task(bot.send_message(pid, notify_text)))
                tasks.append(asyncio.create_task(bot.send_message(pid, overview, reply_markup=kb_lobby_actions(lid_local, pid))))
            except Exception:
                pass
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)

    asyncio.create_task(notify_joiners(lid, c.from_user.id))

# --------------------------
# –£–ü–†–ê–í–õ–ï–ù–ò–ï/–í–´–•–û–î/–í–´–ì–û–ù
# --------------------------
@dp.callback_query(F.data.startswith("leave_in_game_"))
async def cb_leave_in_game(c: CallbackQuery):
    # leave_in_game_{lid}
    lid = c.data.split("_", 3)[3]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await c.message.edit_text("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=kb_main(c.from_user.id))
        return
    lobby = db["lobbies"][lid]
    # —É–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    leave_lobby(lid, c.from_user.id, penalize_if_started=False)

    async def notify_and_close(lid_local: str, leaving_uid: int):
        db_local = load_db()
        if lid_local not in db_local["lobbies"]:
            return
        lobby_local = db_local["lobbies"][lid_local]
        tasks = []
        msg = f"‚ö†Ô∏è {db_local['users'].get(str(leaving_uid), {'name': '–ò–≥—Ä–æ–∫'})['name']} –≤—ã—à–µ–ª ‚Äî –º–∞—Ç—á –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        for pid in list(lobby_local["players"]):
            try:
                tasks.append(asyncio.create_task(bot.send_message(pid, msg, reply_markup=kb_main(pid))))
            except Exception:
                pass
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
        delete_lobby(lid_local)

    asyncio.create_task(notify_and_close(lid, c.from_user.id))

    await c.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—Ç—á–∞")
    await c.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—Ç—á–∞", reply_markup=kb_main(c.from_user.id))

@dp.callback_query(F.data.startswith("leave_"))
async def cb_leave(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    ok, reason = leave_lobby(lid, c.from_user.id, penalize_if_started=False)
    if ok:
        async def notify_leave(lid_local: str, left_uid: int):
            db_local = load_db()
            if lid_local not in db_local["lobbies"]:
                return
            lobby_local = db_local["lobbies"][lid_local]
            name = db_local["users"].get(str(left_uid), {"name": f"User {left_uid}"})["name"]
            text = f"‚ö†Ô∏è <b>{name}</b> –ø–æ–∫–∏–Ω—É–ª –ª–æ–±–±–∏ <code>{lid_local}</code>."
            overview = lobby_overview_text(lid_local, lobby_local)
            tasks = []
            for pid in lobby_local["players"]:
                try:
                    tasks.append(asyncio.create_task(bot.send_message(pid, text)))
                    tasks.append(asyncio.create_task(bot.send_message(pid, overview, reply_markup=kb_lobby_actions(lid_local, pid))))
                except Exception:
                    pass
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)

        asyncio.create_task(notify_leave(lid, c.from_user.id))

        await c.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏")
        await c.message.edit_text("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=kb_main(c.from_user.id))
    else:
        await c.answer(reason, show_alert=True)

@dp.callback_query(F.data.startswith("manage_"))
async def cb_manage(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    lobby = db["lobbies"][lid]
    if c.from_user.id != lobby["creator"]:
        await c.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    for p in lobby["players"]:
        if p == lobby["creator"]:
            continue
        name = db["users"].get(str(p), {"name": f"User {p}"})["name"]
        kb.button(text=f"‚ùå –í—ã–≥–Ω–∞—Ç—å {name}", callback_data=f"kick_{lid}_{p}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_{lid}")
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("kick_"))
async def cb_kick(c: CallbackQuery):
    _, lid, pid_str = c.data.split("_", 2)
    pid = int(pid_str)
    ok, reason = kick_from_lobby(lid, c.from_user.id, pid)
    if ok:
        try:
            await bot.send_message(pid, f"–í–∞—Å –≤—ã–≥–Ω–∞–ª–∏ –∏–∑ –ª–æ–±–±–∏ {lid}.", reply_markup=kb_main(pid))
        except Exception:
            pass
        async def notify_kick(lid_local: str, kicked_uid: int):
            db_local = load_db()
            if lid_local not in db_local["lobbies"]:
                return
            lobby_local = db_local["lobbies"][lid_local]
            text = f"‚ùå –ò–≥—Ä–æ–∫ {db_local['users'].get(str(kicked_uid), {'name':'–ò–≥—Ä–æ–∫'})['name']} –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –ª–æ–±–±–∏."
            overview = lobby_overview_text(lid_local, lobby_local)
            tasks = []
            for pid_local in lobby_local["players"]:
                try:
                    tasks.append(asyncio.create_task(bot.send_message(pid_local, text)))
                    tasks.append(asyncio.create_task(bot.send_message(pid_local, overview, reply_markup=kb_lobby_actions(lid_local, pid_local))))
                except Exception:
                    pass
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)
        asyncio.create_task(notify_kick(lid, pid))

        await c.answer("–ò–≥—Ä–æ–∫ –≤—ã–≥–Ω–∞–Ω")
        await c.message.edit_text("–ò–≥—Ä–æ–∫ –≤—ã–≥–Ω–∞–Ω.", reply_markup=kb_play())
    else:
        await c.answer(reason, show_alert=True)

@dp.callback_query(F.data.startswith("view_"))
async def cb_view(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await c.message.edit_text("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_play())
        return
    lobby = db["lobbies"][lid]
    text = lobby_overview_text(lid, lobby)
    await c.message.edit_text(text, reply_markup=kb_lobby_actions(lid, c.from_user.id))

# --------------------------
# –°–¢–ê–†–¢ –ò–ì–†–´ + –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞–≤–æ–∫
# --------------------------
@dp.callback_query(F.data.startswith("start_"))
async def cb_start_game(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    lobby = db["lobbies"][lid]
    if c.from_user.id != lobby["creator"]:
        await c.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å", show_alert=True)
        return
    # –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∏–≥—Ä–æ–∫–∞–º
    if len(lobby["players"]) < min_players(lobby["game"]):
        await c.answer(f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_players(lobby['game'])} –∏–≥—Ä–æ–∫–æ–≤", show_alert=True)
        return
    if len(lobby["players"]) > max_players(lobby["game"]):
        await c.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã", show_alert=True)
        return

    bet = int(lobby.get("bet", DEFAULT_BET))
    # –ø—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫—É
    for pid in lobby["players"]:
        ensure_user(pid, load_db()["users"].get(str(pid), {}).get("name", f"User {pid}"))
        available = user_available_balance(pid)
        if available < bet:
            # –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—Ç –∏ —Å–æ–æ–±—â–∞–µ–º
            await c.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏!", show_alert=True)
            await c.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç —É –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏. –õ–æ–±–±–∏ –Ω–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç.", reply_markup=kb_lobby_actions(lid, c.from_user.id))
            return
    # –±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ (–≤—Å–µ –∞—Ç–æ–º–∞—Ä–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞)
    try:
        for pid in lobby["players"]:
            inc_locked(pid, bet)
    except Exception as e:
        # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç
        for pid in lobby["players"]:
            try:
                dec_locked(pid, bet)
            except Exception:
                pass
        await c.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å—Ç–∞–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ —Å—Ç–∞–≤–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
    db = load_db()
    db["lobbies"][lid]["bet_locked"] = True
    # –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º game_state –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    db["lobbies"][lid]["started"] = True
    db["lobbies"][lid]["game_state"] = {
        "current_round": 1,
        "rounds_total": DICE_ROUNDS,
        "round_rolls": {},        # {round: {uid: value}}
        "match_scores": {str(p): 0 for p in db["lobbies"][lid]["players"]}
    }
    save_db(db)

    async def notify_start(lid_local: str):
        db_local = load_db()
        if lid_local not in db_local["lobbies"]:
            return
        lobby_local = db_local["lobbies"][lid_local]
        tasks = []
        lobby_name = lobby_local.get("name", lid)
        start_text = f"üöÄ –ú–∞—Ç—á –≤ –ª–æ–±–±–∏ <b>{lobby_name}</b> –Ω–∞—á–∞–ª—Å—è!\n–ò–≥—Ä–∞: –ö–æ—Å—Ç–∏ üé≤\n–°—Ç–∞–≤–∫–∞: {lobby_local.get('bet')} –º–æ–Ω–µ—Ç —Å –∏–≥—Ä–æ–∫–∞. –£–¥–∞—á–∏!"
        overview = lobby_overview_text(lid_local, lobby_local)
        for pid in lobby_local["players"]:
            try:
                tasks.append(asyncio.create_task(bot.send_message(pid, start_text)))
                tasks.append(asyncio.create_task(bot.send_message(pid, overview, reply_markup=kb_lobby_actions(lid_local, pid))))
            except Exception:
                pass
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)

    asyncio.create_task(notify_start(lid))

    # –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–µ)
    asyncio.create_task(announce_dice_round(lid))

# --------------------------
# –ò–ì–†–ê: –ö–û–°–¢–ò (üé≤)
# --------------------------
async def announce_dice_round(lid: str):
    db = load_db()
    if lid not in db["lobbies"]:
        return
    lobby = db["lobbies"][lid]
    gs = lobby["game_state"]
    r = gs["current_round"]
    total = gs["rounds_total"]
    kb = InlineKeyboardBuilder()
    kb.button(text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data=f"dice_roll_{lid}")
    kb.button(text="üö™ –í—ã–π—Ç–∏ (–ø—Ä–µ—Ä–≤–∞—Ç—å –º–∞—Ç—á)", callback_data=f"leave_in_game_{lid}")
    markup = kb.as_markup()
    tasks = []
    for pid in lobby["players"]:
        try:
            tasks.append(asyncio.create_task(bot.send_message(pid, f"–†–∞—É–Ω–¥ {r}/{total} ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫¬ª", reply_markup=markup)))
        except Exception:
            pass
    if tasks:
        await asyncio.gather(*tasks, return_exceptions=True)

@dp.callback_query(F.data.startswith("dice_roll_"))
async def cb_dice_roll(c: CallbackQuery):
    lid = c.data.split("_", 2)[2]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    lobby = db["lobbies"][lid]
    if not lobby.get("started", False):
        await c.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞", show_alert=True)
        return
    uid = c.from_user.id
    if uid not in lobby["players"]:
        await c.answer("–í—ã –Ω–µ –≤ —ç—Ç–æ–º –ª–æ–±–±–∏", show_alert=True)
        return
    gs = lobby["game_state"]
    r = gs["current_round"]
    rkey = str(r)
    if rkey not in gs["round_rolls"]:
        gs["round_rolls"][rkey] = {}
    if str(uid) in gs["round_rolls"][rkey]:
        await c.answer("–í—ã —É–∂–µ –±—Ä–æ—Å–∞–ª–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ", show_alert=True)
        return
    # –±—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ —á–µ—Ä–µ–∑ —ç–º–æ–¥–∑–∏ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–∏–º–∞—Ü–∏—é –∫—É–±–∏–∫–∞)
    try:
        msg = await bot.send_dice(uid, emoji="üé≤")
    except Exception:
        # –≤ —á–∞—Ç–∞—Ö-–±–æ—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å send_dice —é–∑–µ—Ä—É –Ω–∞–ø—Ä—è–º—É—é –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ (–µ—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å)
        # —Ç–æ–≥–¥–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º –±—Ä–æ—Å–æ–∫
        value = random.randint(1, 6)
    else:
        value = msg.dice.value
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –±—Ä–æ—Å–æ–∫
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –ø—Ä–æ–ø–∞–ª–æ", show_alert=True)
        return
    db["lobbies"][lid]["game_state"]["round_rolls"].setdefault(rkey, {})[str(uid)] = value
    save_db(db)
    await c.answer(f"üé≤ –í—ã –±—Ä–æ—Å–∏–ª–∏: {value}")

    db = load_db()
    lobby = db["lobbies"][lid]
    gs = lobby["game_state"]
    rolls = gs["round_rolls"][rkey]
    # –µ—Å–ª–∏ –≤—Å–µ –±—Ä–æ—Å–∏–ª–∏ ‚Äî –ø–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ —Ä–∞—É–Ω–¥–∞
    if len(rolls) >= len(lobby["players"]):
        max_val = max(rolls.values())
        winners = [int(pid) for pid, v in rolls.items() if v == max_val]
        if len(winners) == 1:
            gs["match_scores"][str(winners[0])] += 1
            round_result = f"üèÜ –†–∞—É–Ω–¥ {r}: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî {load_db()['users'][str(winners[0])]['name']} ({max_val})"
        else:
            # –Ω–∏—á—å—è –ø–æ —Ä–∞—É–Ω–¥—É ‚Äî +1 –≤—Å–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–µ–∂–Ω–µ–π –ª–æ–≥–∏–∫–æ–π
            for pid in winners:
                gs["match_scores"][str(pid)] += 1
            round_result = f"ü§ù –†–∞—É–Ω–¥ {r}: –Ω–∏—á—å—è! (–º–∞–∫—Å {max_val}) ‚Äî –≤—Å–µ–º +1"
        # –æ–±—â–∏–π —Å—á—ë—Ç
        score_text = "üî¢ –°—á—ë—Ç –º–∞—Ç—á–∞:\n"
        for p in lobby["players"]:
            score_text += f"- {load_db()['users'][str(p)]['name']}: {gs['match_scores'][str(p)]}\n"
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤—Å–µ–º
        summary = f"üé≤ –ü–æ–¥—Å—á—ë—Ç —Ä–∞—É–Ω–¥–∞ {r}:\n"
        for p_str, val in rolls.items():
            summary += f"- {load_db()['users'][p_str]['name']}: {val}\n"
        summary += f"\n{round_result}\n\n{score_text}"
        tasks = []
        for pid in lobby["players"]:
            try:
                tasks.append(asyncio.create_task(bot.send_message(pid, summary)))
            except Exception:
                pass
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
        # —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∏–ª–∏ –∫–æ–Ω–µ—Ü
        gs["current_round"] += 1
        db = load_db()
        db["lobbies"][lid]["game_state"] = gs
        save_db(db)
        if gs["current_round"] > gs["rounds_total"]:
            # –∫–æ–Ω–µ—Ü –º–∞—Ç—á–∞ ‚Äî —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
            await finish_dice_match(lid)
            return
        else:
            await asyncio.sleep(1)
            await announce_dice_round(lid)
    else:
        await c.answer("–í–∞—à –±—Ä–æ—Å–æ–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ñ–¥—ë–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...")

async def finish_dice_match(lid: str):
    """
    –í –∫–æ–Ω—Ü–µ –º–∞—Ç—á–∞: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è(–µ–π).
    –†–∞—Å—á—ë—Ç –≤—ã–∏–≥—Ä—ã—à–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π:
      payout = (bet * 2) * (1 - HOUSE_COMMISSION)
    –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç payout –Ω–∞ –±–∞–ª–∞–Ω—Å (–∏ profit = payout - bet).
    –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –ø–æ–ª—É—á–∞–µ—Ç profit = -bet.
    –ü—Ä–∏ –Ω–∏—á—å–µ: —Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è (profit = 0).
    –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è; –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –æ–±–∞ –∏ —É–≤–µ–¥–æ–º–∏–º.
    """
    db = load_db()
    if lid not in db["lobbies"]:
        return
    lobby = db["lobbies"][lid]
    gs = lobby["game_state"]
    players = lobby["players"]
    scores = {p: gs.get("match_scores", {}).get(str(p), 0) for p in players}
    max_score = max(scores.values())
    winners = [p for p, s in scores.items() if s == max_score]
    bet = int(lobby.get("bet", DEFAULT_BET))

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try:
        if len(winners) == 1:
            winner = winners[0]
            # –≤—ã—á–∏—Å–ª—è–µ–º –≤—ã–ø–ª–∞—Ç—É
            total_bank = bet * 2
            payout = int(total_bank * (1 - HOUSE_COMMISSION))
            # –ø—Ä–∏–±—ã–ª—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è = payout - –µ–≥–æ —Å—Ç–∞–≤–∫–∞
            profit_winner = payout - bet
            profit_loser = -bet
            loser = [p for p in players if p != winner][0]

            # –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–µ–Ω—å–≥–∏
            # –¥–µ–ª–∞–µ–º –≤ safe try-except: –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –æ—Ç–∫–∞—Ç–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            try:
                # —É–º–µ–Ω—å—à–µ–Ω–∏–µ locked –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:
                dec_locked(winner, bet)
                dec_locked(loser, bet)

                # –Ω–∞—á–∏—Å–ª–∏–º –≤—ã–ø–ª–∞—Ç—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
                change_balance_atomic(winner, payout)
                # –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π —Å—Ç–∞–≤–∫–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è ‚Äî –±–∞–ª–∞–Ω—Å —É –Ω–µ–≥–æ —É–∂–µ —É–º–µ–Ω—å—à–µ–Ω –∑–∞ —Å—á—ë—Ç locked (–º—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –µ–≥–æ balance)
                # –Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ locked –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç balance, –Ω–∞ –º–æ–º–µ–Ω—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º—ã –Ω–µ —Å–Ω–∏–º–∞–ª–∏ balance,
                # –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É: –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –º—ã –Ω–µ —Å–Ω–∏–º–∞–ª–∏ balance; —Å–µ–π—á–∞—Å —Å–Ω–∏–º–∞–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É —Å—Ç–∞–≤–∫—É
                change_balance_atomic(loser, -bet)

                # record stats
                add_game_result(winner, True)
                add_game_result(loser, False)

                # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ –¥–ª—è –æ–±–æ–∏—Ö
                record_bet_history(winner, bet, loser, "win", profit_winner)
                record_bet_history(loser, bet, winner, "loss", profit_loser)

                # —É–≤–µ–¥–æ–º–ª—è–µ–º
                result_text = (
                    f"üéâ –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{load_db()['users'][str(winner)]['name']}</b>\n"
                    f"–°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç\n"
                    f"–ë–∞–Ω–∫: {total_bank} ‚Üí –ö–æ–º–∏—Å—Å–∏—è –¥–æ–º–∞: {int(total_bank * HOUSE_COMMISSION)} –º–æ–Ω–µ—Ç\n"
                    f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—é –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {payout} –º–æ–Ω–µ—Ç (–ø—Ä–∏–±—ã–ª—å: {profit_winner})\n"
                )
            except Exception as e:
                # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—ë –∏ —É–≤–µ–¥–æ–º–∏–º
                for p in players:
                    try:
                        dec_locked(p, bet)
                    except Exception:
                        pass
                for p in players:
                    try:
                        await bot.send_message(p, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—ã–∏–≥—Ä—ã—à–∞. –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
                    except Exception:
                        pass
                # —É–¥–∞–ª–∏–º –ª–æ–±–±–∏ –∏ –≤—ã–π–¥–µ–º
                delete_lobby(lid)
                return

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª
            final_scores_text = "–ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç:\n" + "\n".join([f"- {load_db()['users'][str(p)]['name']}: {scores[p]}" for p in players])
            tasks = []
            for pid in players:
                try:
                    tasks.append(asyncio.create_task(bot.send_message(pid, f"{result_text}\n{final_scores_text}", reply_markup=kb_main(pid))))
                except Exception:
                    pass
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)

        else:
            # –Ω–∏—á—å—è: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏, profit = 0
            for p in players:
                try:
                    dec_locked(p, bet)
                except Exception:
                    pass
            # –Ω–µ –º–µ–Ω—è–µ–º balance
            for p in players:
                add_game_result(p, False)  # –Ω–∏—á—å—é —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —Å—ã–≥—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –±–µ–∑ –ø–æ–±–µ–¥—ã
                record_bet_history(p, bet, [x for x in players if x != p][0], "draw", 0)
            names = ", ".join([load_db()['users'][str(p)]['name'] for p in winners])
            result_text = f"ü§ù –ù–∏—á—å—è –º–µ–∂–¥—É: {names}. –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, profit: 0."
            final_scores_text = "–ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç:\n" + "\n".join([f"- {load_db()['users'][str(p)]['name']}: {scores[p]}" for p in players])
            tasks = []
            for pid in players:
                try:
                    tasks.append(asyncio.create_task(bot.send_message(pid, f"{result_text}\n\n{final_scores_text}", reply_markup=kb_main())))
                except Exception:
                    pass
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)
    finally:
        # —É–¥–∞–ª–∏—Ç—å –ª–æ–±–±–∏
        delete_lobby(lid)

# --------------------------
# –ü–†–û–§–ò–õ–¨ –ò –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–°
# --------------------------
def profile_text_for(uid: int) -> str:
    ensure_user(uid, f"User {uid}")
    u = get_user(uid)
    last_bonus = u.get("lastBonusTimestamp")

    # —Å—Ç–∞—Ç—É—Å –±–æ–Ω—É—Å–∞
    if not last_bonus:
        bonus_status = "‚ú® –î–æ—Å—Ç—É–ø–Ω–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é!"
    else:
        try:
            next_time = datetime.fromtimestamp(
                int(last_bonus) + DAILY_BONUS_INTERVAL
            ).astimezone(timezone(timedelta(hours=3))).strftime("%d.%m.%Y %H:%M (–ú–°–ö)")
            bonus_status = f"‚úÖ –£–∂–µ –ø–æ–ª—É—á–µ–Ω–∞\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è: {next_time}"
        except Exception:
            bonus_status = "‚ùå –û—à–∏–±–∫–∞ –¥–∞—Ç—ã"

    # –Ω–æ–≤—ã–π –≤–∏–¥ –ø—Ä–æ—Ñ–∏–ª—è –π–æ—É
    return (
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"üëë <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
        f"üÜî <b>ID:</b> <code>{uid}</code>\n"
        f"üë§ <b>–ò–º—è:</b> {u.get('name')}\n\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"‚Ä¢ üïπÔ∏è –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {u.get('games',0)}\n"
        f"‚Ä¢ üèÜ –ü–æ–±–µ–¥: {u.get('wins',0)}\n\n"
        "üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã</b>\n"
        f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {u.get('balance',0)} –º–æ–Ω–µ—Ç\n\n"
        "üé∞ <b>–°–ª–æ—Ç—ã</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {u.get('slot_wins', 0)} –º–æ–Ω–µ—Ç\n"
        f"‚Ä¢ –î–∂–µ–∫–ø–æ—Ç–æ–≤: {u.get('slot_jackpots', 0)}\n\n"
        "üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞</b>\n"
        f"{bonus_status}\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    )

def kb_profile(uid: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", callback_data=f"daily_{uid}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    return kb.adjust(2).as_markup()

@dp.callback_query(F.data == "profile")
async def cb_profile(c: CallbackQuery):
    ensure_user(c.from_user.id, c.from_user.full_name)
    await c.message.edit_text(profile_text_for(c.from_user.id), reply_markup=kb_profile(c.from_user.id))

@dp.callback_query(F.data.startswith("daily_"))
async def cb_daily(c: CallbackQuery):
    parts = c.data.split("_", 1)
    if len(parts) < 2:
        await c.answer("–û—à–∏–±–∫–∞", show_alert=True)
        return
    target_uid = int(parts[1])
    if target_uid != c.from_user.id:
        await c.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!", show_alert=True)
        return

    ensure_user(c.from_user.id, c.from_user.full_name)
    u = get_user(c.from_user.id)
    last_ts = u.get("lastBonusTimestamp")
    now = int(time.time())
    if last_ts:
        try:
            last_ts_int = int(last_ts)
        except Exception:
            last_ts_int = 0
    else:
        last_ts_int = 0

    if now - last_ts_int < DAILY_BONUS_INTERVAL:
        next_time = datetime.utcfromtimestamp(last_ts_int + DAILY_BONUS_INTERVAL).strftime("%Y-%m-%d %H:%M:%S UTC")
        await c.answer("‚è≥ –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞: " + next_time, show_alert=True)
        await c.message.edit_text(profile_text_for(c.from_user.id), reply_markup=kb_profile(c.from_user.id))
        return

    # üí∞ —Å—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å –∏–∑ –∫–æ–ø–∏–ª–∫–∏
    db = load_db()
    house_balance = db.get("house_balance", 0)

    # 50% –æ—Ç –∫–æ–ø–∏–ª–∫–∏ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    total_users = max(1, len(db["users"]))
    pool_for_bonus = int(house_balance * 0.5)
    bonus_per_user = max(1, pool_for_bonus // total_users)  # —Ö–æ—Ç—è –±—ã 1 –º–æ–Ω–µ—Ç–∞

    if bonus_per_user > 0:
        # —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ø–∏–ª–∫—É
        db["house_balance"] = house_balance - bonus_per_user
        # –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
        db["users"][str(c.from_user.id)]["lastBonusTimestamp"] = now
        db["users"][str(c.from_user.id)]["dailyBonusClaimed"] = True
        db["users"][str(c.from_user.id)]["balance"] += bonus_per_user
        save_db(db)

        await c.answer(f"üéâ –ü–æ–ª—É—á–µ–Ω–æ {bonus_per_user} –º–æ–Ω–µ—Ç –∏–∑ –∫–æ–ø–∏–ª–∫–∏ –¥–æ–º–∞!", show_alert=True)
    else:
        await c.answer("üôÉ –ö–æ–ø–∏–ª–∫–∞ –ø—É—Å—Ç–∞, –±–æ–Ω—É—Å–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!", show_alert=True)

    await c.message.edit_text(profile_text_for(c.from_user.id), reply_markup=kb_profile(c.from_user.id))

# --------------------------
# fallback ‚Äî –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
# --------------------------
@dp.message()
async def fallback(msg: Message):
    ensure_user(msg.from_user.id, msg.from_user.full_name)
    await msg.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é:", reply_markup=kb_main(msg.from_user.id))

# --------------------------
# –ó–ê–ü–£–°–ö
# --------------------------
async def main():
    print("Bot starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped")
