# bot.py  ‚Äî –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π Telegram-–±–æ—Ç –Ω–∞ aiogram 3.7+
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –ö–æ—Å—Ç–∏ (üé≤) –∏ –ë–∞—Å–∫–µ—Ç–±–æ–ª (üèÄ).
# –•—Ä–∞–Ω–µ–Ω–∏–µ: database.json (—Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º).
#
# –í–ê–ñ–ù–û: –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –≤ TOKEN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.

import asyncio
import random
import json
from pathlib import Path
from typing import Dict, Any, List

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.bot import DefaultBotProperties

# --------------------------
# –ù–ê–°–¢–†–û–ô–ö–ò
# --------------------------
# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è / –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
TOKEN = "8001643590:AAG93uhtCw-MwIOTXJkeGGOG7k7FjdSTeQM"
DB_PATH = Path("database.json")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä
DICE_ROUNDS = 6
BASKET_GOAL = 10
BASKET_HIT_PROB = 0.40  # —à–∞–Ω—Å –∑–∞–±—Ä–æ—Å–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª–µ

# --------------------------
# –ë–ê–ó–ê (JSON)
# --------------------------
def load_db() -> Dict[str, Any]:
    if not DB_PATH.exists():
        DB_PATH.write_text(json.dumps({"users": {}, "lobbies": {}}, ensure_ascii=False, indent=4), encoding="utf-8")
    return json.loads(DB_PATH.read_text(encoding="utf-8"))

def save_db(data: Dict[str, Any]):
    DB_PATH.write_text(json.dumps(data, ensure_ascii=False, indent=4), encoding="utf-8")

# --------------------------
# –£–¢–ò–õ–ò–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# --------------------------
def ensure_user(uid: int, name: str):
    db = load_db()
    s = str(uid)
    if s not in db["users"]:
        db["users"][s] = {"name": name, "wins": 0}
        save_db(db)

def add_win(uid: int, amount: int = 1):
    db = load_db()
    s = str(uid)
    if s not in db["users"]:
        db["users"][s] = {"name": f"User {s}", "wins": 0}
    db["users"][s]["wins"] += amount
    save_db(db)

def user_label(uid: int) -> str:
    db = load_db()
    u = db["users"].get(str(uid), {"name": f"User {uid}", "wins": 0})
    return f"{u['name']} ({u['wins']})"

# --------------------------
# –õ–û–ë–ë–ò: —Å–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥
# --------------------------
def max_players(game: str) -> int:
    return 2 if game == "dice" else 10

def min_players(game: str) -> int:
    return 2

def new_lobby_id() -> str:
    db = load_db()
    while True:
        lid = str(random.randint(100000, 999999))
        if lid not in db["lobbies"]:
            return lid

def create_lobby(game: str, creator_uid: int) -> str:
    db = load_db()
    lid = new_lobby_id()
    db["lobbies"][lid] = {
        "game": game,
        "creator": creator_uid,
        "players": [creator_uid],
        "started": False,
        "game_state": {}  # –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    }
    save_db(db)
    return lid

def join_lobby(lid: str, uid: int) -> (bool, str):
    db = load_db()
    if lid not in db["lobbies"]:
        return False, "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    lobby = db["lobbies"][lid]
    if lobby["started"]:
        return False, "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å"
    if uid in lobby["players"]:
        return False, "–í—ã —É–∂–µ –≤ –ª–æ–±–±–∏"
    if len(lobby["players"]) >= max_players(lobby["game"]):
        return False, "–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
    lobby["players"].append(uid)
    save_db(db)
    return True, "–£—Å–ø–µ—à–Ω–æ"

def leave_lobby(lid: str, uid: int, penalize_if_started: bool = False) -> (bool, str):
    db = load_db()
    if lid not in db["lobbies"]:
        return False, "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    lobby = db["lobbies"][lid]
    if uid in lobby["players"]:
        lobby["players"].remove(uid)
    if penalize_if_started and lobby.get("started", False):
        add_win(uid, -5)
    # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —É–¥–∞–ª—è–µ–º –ª–æ–±–±–∏
    if len(lobby["players"]) == 0:
        del db["lobbies"][lid]
    save_db(db)
    return True, "–í—ã—à–ª–∏"

def kick_from_lobby(lid: str, by_uid: int, target_uid: int) -> (bool, str):
    db = load_db()
    if lid not in db["lobbies"]:
        return False, "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    lobby = db["lobbies"][lid]
    if lobby["creator"] != by_uid:
        return False, "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–∫–∏–¥—ã–≤–∞—Ç—å"
    if target_uid not in lobby["players"]:
        return False, "–ò–≥—Ä–æ–∫ –Ω–µ –≤ –ª–æ–±–±–∏"
    lobby["players"].remove(target_uid)
    save_db(db)
    return True, "–í—ã–≥–Ω–∞–Ω"

def delete_lobby(lid: str):
    db = load_db()
    if lid in db["lobbies"]:
        del db["lobbies"][lid]
        save_db(db)

# --------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–ò UI
# --------------------------
def format_players_list(lobby: Dict[str, Any]) -> str:
    """–í–µ—Ä–Ω—ë—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."""
    db = load_db()
    lines = []
    for p in lobby["players"]:
        user = db["users"].get(str(p), {"name": f"User {p}", "wins": 0})
        prefix = "üëë " if p == lobby["creator"] else "‚Ä¢ "
        lines.append(f"{prefix}{user['name']} ‚Äî {user['wins']} wins")
    return "\n".join(lines)

def lobby_overview_text(lid: str, lobby: Dict[str, Any]) -> str:
    """–ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ª–æ–±–±–∏."""
    game_name = "–ö–æ—Å—Ç–∏ üé≤" if lobby["game"] == "dice" else "–ë–∞—Å–∫–µ—Ç–±–æ–ª üèÄ"
    text = (
        f"üî∑ <b>–õ–æ–±–±–∏ {lid}</b>\n"
        f"üéÆ –ò–≥—Ä–∞: {game_name}\n"
        f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: {load_db()['users'].get(str(lobby['creator']), {'name': 'Unknown'})['name']}\n\n"
        f"<b>–ò–≥—Ä–æ–∫–∏ ({len(lobby['players'])}/{max_players(lobby['game'])}):</b>\n"
        f"{format_players_list(lobby)}\n\n"
    )
    if not lobby.get("started", False):
        text += "‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è."
    else:
        text += "‚úÖ –ò–≥—Ä–∞ –∏–¥—ë—Ç ‚Äî –æ–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ö–æ–¥–µ —Ä–∞—É–Ω–¥–æ–≤."
    return text

# --------------------------
# UI / –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# --------------------------
def kb_main():
    kb = InlineKeyboardBuilder()
    kb.button(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play")
    kb.button(text="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaders")
    return kb.as_markup()

def kb_play():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏", callback_data="create_game")
    kb.button(text="üîé –ù–∞–π—Ç–∏ –ª–æ–±–±–∏", callback_data="join_game")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    return kb.as_markup()

def kb_game_types():
    kb = InlineKeyboardBuilder()
    kb.button(text="üé≤ –ö–æ—Å—Ç–∏", callback_data="create_dice")
    kb.button(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="create_basket")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
    return kb.as_markup()

def kb_lobby_actions(lid: str, uid: int):
    db = load_db()
    if lid not in db["lobbies"]:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
        return kb.as_markup()
    lobby = db["lobbies"][lid]
    kb = InlineKeyboardBuilder()
    if not lobby.get("started", False):
        # –Ω–µ –Ω–∞—á–∞—Ç–∞
        if uid in lobby["players"]:
            kb.button(text="üîô –í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏", callback_data=f"leave_{lid}")
        if uid == lobby["creator"]:
            kb.button(text="üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"start_{lid}")
            kb.button(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –∏–≥—Ä–æ–∫–∞–º–∏", callback_data=f"manage_{lid}")
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
    else:
        # –Ω–∞—á–∞—Ç–∞
        kb.button(text="üö™ –í—ã–π—Ç–∏ (—à—Ç—Ä–∞—Ñ -5)", callback_data=f"leave_in_game_{lid}")
    return kb.as_markup()

# --------------------------
# –ë–û–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (aiogram 3.7+)
# --------------------------
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã –º–µ–Ω—é
# --------------------------
@dp.message(F.text == "/start")
async def cmd_start(msg: Message):
    ensure_user(msg.from_user.id, msg.from_user.full_name)
    await msg.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{msg.from_user.full_name}</b>!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã. –í—ã–±–∏—Ä–∞–π:", reply_markup=kb_main())

@dp.callback_query(F.data == "back_main")
async def cb_back_main(c: CallbackQuery):
    await c.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main())

@dp.callback_query(F.data == "play")
async def cb_play(c: CallbackQuery):
    await c.message.edit_text("üéÆ –ú–µ–Ω—é ‚Äî –∏–≥—Ä–∞—Ç—å:", reply_markup=kb_play())

@dp.callback_query(F.data == "create_game")
async def cb_create_game(c: CallbackQuery):
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ª–æ–±–±–∏:", reply_markup=kb_game_types())

@dp.callback_query(F.data == "leaders")
async def cb_leaders(c: CallbackQuery):
    db = load_db()
    users = list(db["users"].items())
    users.sort(key=lambda x: x[1]["wins"], reverse=True)
    text = "<b>üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤</b>\n\n"
    if not users:
        text += "–ü–æ–∫–∞ –ø—É—Å—Ç–æ ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–∞—Ä—Ç–∏—é!"
    else:
        for i, (uid, info) in enumerate(users[:20], 1):
            text += f"{i}. {info['name']} ‚Äî {info['wins']} –ø–æ–±–µ–¥\n"
    await c.message.edit_text(text, reply_markup=kb_main())

# --------------------------
# CREATE LOBBY handlers
# --------------------------
@dp.callback_query(F.data == "create_dice")
async def cb_create_dice(c: CallbackQuery):
    ensure_user(c.from_user.id, c.from_user.full_name)
    lid = create_lobby("dice", c.from_user.id)
    text = (
        f"‚úÖ –õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ ‚Äî <b>–ö–æ—Å—Ç–∏ üé≤</b>\n\n"
        f"üÜî <code>{lid}</code>\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {c.from_user.full_name} üëë\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</b>."
    )
    await c.message.edit_text(text, reply_markup=kb_lobby_actions(lid, c.from_user.id))

@dp.callback_query(F.data == "create_basket")
async def cb_create_basket(c: CallbackQuery):
    ensure_user(c.from_user.id, c.from_user.full_name)
    lid = create_lobby("basketball", c.from_user.id)
    text = (
        f"‚úÖ –õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ ‚Äî <b>–ë–∞—Å–∫–µ—Ç–±–æ–ª üèÄ</b>\n\n"
        f"üÜî <code>{lid}</code>\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {c.from_user.full_name} üëë\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ (2‚Äì10). –ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</b>."
    )
    await c.message.edit_text(text, reply_markup=kb_lobby_actions(lid, c.from_user.id))

# --------------------------
# JOIN: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
# --------------------------
@dp.callback_query(F.data == "join_game")
async def cb_list_lobbies(c: CallbackQuery):
    db = load_db()
    text_lines = ["üîé <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–±–±–∏</b>:\n"]
    kb = InlineKeyboardBuilder()
    found = False
    for lid, lobby in db["lobbies"].items():
        if lobby.get("started", False):
            continue
        found = True
        emoji = "üé≤" if lobby["game"] == "dice" else "üèÄ"
        text_lines.append(f"üÜî {lid} | {emoji} {lobby['game']} | ({len(lobby['players'])}/{max_players(lobby['game'])})")
        kb.button(text=f"‚û°Ô∏è –í–æ–π—Ç–∏ {lid}", callback_data=f"join_{lid}")
    if not found:
        text_lines.append("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–±–±–∏")
        await c.message.edit_text("\n".join(text_lines), reply_markup=kb_play())
        return
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
    await c.message.edit_text("\n".join(text_lines), reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("join_"))
async def cb_join_specific(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    ensure_user(c.from_user.id, c.from_user.full_name)
    ok, reason = join_lobby(lid, c.from_user.id)
    if not ok:
        await c.answer(reason, show_alert=True)
        await c.message.edit_text(reason, reply_markup=kb_play())
        return

    # –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å ‚Äî –ø–æ–∫–∞–∂–µ–º –ª–æ–±–±–∏ –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
    db = load_db()
    lobby = db["lobbies"][lid]

    # –ö—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –ª–æ–±–±–∏
    text = (
        f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏ <b>{lid}</b>\n\n"
        f"{lobby_overview_text(lid, lobby)}\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ —Å—Ç–∞—Ä—Ç–∞ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é."
    )
    await c.message.edit_text(text, reply_markup=kb_lobby_actions(lid, c.from_user.id))

    # —É–≤–µ–¥–æ–º–∏–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫,
    # –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ª–æ–±–±–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.
    async def notify_joiners(lid_local: str, new_uid: int):
        db_local = load_db()
        if lid_local not in db_local["lobbies"]:
            return
        lobby_local = db_local["lobbies"][lid_local]
        name = db_local["users"].get(str(new_uid), {"name": f"User {new_uid}"})["name"]
        notify_text = f"‚ú® <b>{name}</b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ª–æ–±–±–∏ <code>{lid_local}</code>!"
        overview = lobby_overview_text(lid_local, lobby_local)
        tasks = []
        for pid in lobby_local["players"]:
            # –Ω–µ –Ω—É–∂–Ω–æ —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É –∏–≥—Ä–æ–∫—É (–æ–Ω —É–∂–µ —É–≤–∏–¥–µ–ª —Å–≤–æ—ë –æ–∫–Ω–æ),
            # –Ω–æ –æ–±–Ω–æ–≤–∏–º –µ–º—É –∫–∞—Ä—Ç–æ—á–∫—É —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
            try:
                tasks.append(asyncio.create_task(bot.send_message(pid, notify_text)))
                tasks.append(asyncio.create_task(bot.send_message(pid, overview, reply_markup=kb_lobby_actions(lid_local, pid))))
            except Exception:
                pass
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)

    # –∑–∞–ø—É—Å—Ç–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ
    asyncio.create_task(notify_joiners(lid, c.from_user.id))

# --------------------------
# –£–ü–†–ê–í–õ–ï–ù–ò–ï/–í–´–•–û–î/–í–´–ì–û–ù
# --------------------------
@dp.callback_query(F.data.startswith("leave_in_game_"))
async def cb_leave_in_game(c: CallbackQuery):
    # leave_in_game_{lid}
    lid = c.data.split("_", 3)[3]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await c.message.edit_text("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=kb_main())
        return
    lobby = db["lobbies"][lid]
    # —à—Ç—Ä–∞—Ñ -5
    add_win(c.from_user.id, -5)
    # —É–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    leave_lobby(lid, c.from_user.id, penalize_if_started=False)

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–±–±–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é ‚Äî –ø—Ä–µ—Ä—ã–≤–∞–µ–º –º–∞—Ç—á)
    async def notify_and_close(lid_local: str, leaving_uid: int):
        db_local = load_db()
        if lid_local not in db_local["lobbies"]:
            # –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            return
        lobby_local = db_local["lobbies"][lid_local]
        tasks = []
        msg = f"‚ö†Ô∏è {db_local['users'].get(str(leaving_uid), {'name': '–ò–≥—Ä–æ–∫'})['name']} –≤—ã—à–µ–ª ‚Äî –º–∞—Ç—á –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        for pid in list(lobby_local["players"]):
            try:
                tasks.append(asyncio.create_task(bot.send_message(pid, msg, reply_markup=kb_main())))
            except Exception:
                pass
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
        # —É–¥–∞–ª–∏–º –ª–æ–±–±–∏
        delete_lobby(lid_local)

    asyncio.create_task(notify_and_close(lid, c.from_user.id))

    await c.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—Ç—á–∞. -5 –ø–æ–±–µ–¥")
    await c.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—Ç—á–∞. -5 –ø–æ–±–µ–¥", reply_markup=kb_main())

@dp.callback_query(F.data.startswith("leave_"))
async def cb_leave(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    ok, reason = leave_lobby(lid, c.from_user.id, penalize_if_started=False)
    if ok:
        # —É–≤–µ–¥–æ–º–∏–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤ –æ–± —É—Ö–æ–¥–µ
        async def notify_leave(lid_local: str, left_uid: int):
            db_local = load_db()
            if lid_local not in db_local["lobbies"]:
                return
            lobby_local = db_local["lobbies"][lid_local]
            name = db_local["users"].get(str(left_uid), {"name": f"User {left_uid}"})["name"]
            text = f"‚ö†Ô∏è <b>{name}</b> –ø–æ–∫–∏–Ω—É–ª –ª–æ–±–±–∏ <code>{lid_local}</code>."
            overview = lobby_overview_text(lid_local, lobby_local)
            tasks = []
            for pid in lobby_local["players"]:
                try:
                    tasks.append(asyncio.create_task(bot.send_message(pid, text)))
                    tasks.append(asyncio.create_task(bot.send_message(pid, overview, reply_markup=kb_lobby_actions(lid_local, pid))))
                except Exception:
                    pass
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)

        asyncio.create_task(notify_leave(lid, c.from_user.id))

        await c.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏")
        await c.message.edit_text("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=kb_main())
    else:
        await c.answer(reason, show_alert=True)

@dp.callback_query(F.data.startswith("manage_"))
async def cb_manage(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    lobby = db["lobbies"][lid]
    if c.from_user.id != lobby["creator"]:
        await c.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    for p in lobby["players"]:
        if p == lobby["creator"]:
            continue
        name = db["users"].get(str(p), {"name": f"User {p}"})["name"]
        kb.button(text=f"‚ùå –í—ã–≥–Ω–∞—Ç—å {name}", callback_data=f"kick_{lid}_{p}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_{lid}")
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("kick_"))
async def cb_kick(c: CallbackQuery):
    _, lid, pid_str = c.data.split("_", 2)
    pid = int(pid_str)
    ok, reason = kick_from_lobby(lid, c.from_user.id, pid)
    if ok:
        try:
            await bot.send_message(pid, f"–í–∞—Å –≤—ã–≥–Ω–∞–ª–∏ –∏–∑ –ª–æ–±–±–∏ {lid}.", reply_markup=kb_main())
        except Exception:
            pass
        # —É–≤–µ–¥–æ–º–∏–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
        async def notify_kick(lid_local: str, kicked_uid: int):
            db_local = load_db()
            if lid_local not in db_local["lobbies"]:
                return
            lobby_local = db_local["lobbies"][lid_local]
            text = f"‚ùå –ò–≥—Ä–æ–∫ {db_local['users'].get(str(kicked_uid), {'name':'–ò–≥—Ä–æ–∫'})['name']} –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –ª–æ–±–±–∏."
            overview = lobby_overview_text(lid_local, lobby_local)
            tasks = []
            for pid_local in lobby_local["players"]:
                try:
                    tasks.append(asyncio.create_task(bot.send_message(pid_local, text)))
                    tasks.append(asyncio.create_task(bot.send_message(pid_local, overview, reply_markup=kb_lobby_actions(lid_local, pid_local))))
                except Exception:
                    pass
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)
        asyncio.create_task(notify_kick(lid, pid))

        await c.answer("–ò–≥—Ä–æ–∫ –≤—ã–≥–Ω–∞–Ω")
        await c.message.edit_text("–ò–≥—Ä–æ–∫ –≤—ã–≥–Ω–∞–Ω.", reply_markup=kb_play())
    else:
        await c.answer(reason, show_alert=True)

@dp.callback_query(F.data.startswith("view_"))
async def cb_view(c: CallbackQuery):
    # view_{lid}
    lid = c.data.split("_", 1)[1]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await c.message.edit_text("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_play())
        return
    lobby = db["lobbies"][lid]
    text = lobby_overview_text(lid, lobby)
    await c.message.edit_text(text, reply_markup=kb_lobby_actions(lid, c.from_user.id))

# --------------------------
# –°–¢–ê–†–¢ –ò–ì–†–´
# --------------------------
@dp.callback_query(F.data.startswith("start_"))
async def cb_start_game(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    lobby = db["lobbies"][lid]
    if c.from_user.id != lobby["creator"]:
        await c.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å", show_alert=True)
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∏–≥—Ä–æ–∫–∞–º
    if len(lobby["players"]) < min_players(lobby["game"]):
        await c.answer(f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_players(lobby['game'])} –∏–≥—Ä–æ–∫–æ–≤", show_alert=True)
        return
    if len(lobby["players"]) > max_players(lobby["game"]):
        await c.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã", show_alert=True)
        return
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    lobby["started"] = True
    if lobby["game"] == "dice":
        lobby["game_state"] = {
            "current_round": 1,
            "rounds_total": DICE_ROUNDS,
            "round_rolls": {},        # {round: {uid: value}}
            "match_scores": {str(p): 0 for p in lobby["players"]}
        }
    else:  # basketball
        lobby["game_state"] = {
            "round": 1,
            "goal_limit": BASKET_GOAL,
            "round_tries": {},        # {round: [uids]}
            "match_scores": {str(p): 0 for p in lobby["players"]}
        }
    save_db(db)
    # —É–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    async def notify_start(lid_local: str):
        db_local = load_db()
        if lid_local not in db_local["lobbies"]:
            return
        lobby_local = db_local["lobbies"][lid_local]
        tasks = []
        start_text = f"üöÄ –ú–∞—Ç—á –≤ –ª–æ–±–±–∏ {lid_local} –Ω–∞—á–∞–ª—Å—è! –ò–≥—Ä–∞: {'–ö–æ—Å—Ç–∏ üé≤' if lobby_local['game']=='dice' else '–ë–∞—Å–∫–µ—Ç–±–æ–ª üèÄ'}"
        overview = lobby_overview_text(lid_local, lobby_local)
        for pid in lobby_local["players"]:
            try:
                tasks.append(asyncio.create_task(bot.send_message(pid, start_text)))
                tasks.append(asyncio.create_task(bot.send_message(pid, overview, reply_markup=kb_lobby_actions(lid_local, pid))))
            except Exception:
                pass
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
    asyncio.create_task(notify_start(lid))

    # –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–µ)
    if lobby["game"] == "dice":
        asyncio.create_task(announce_dice_round(lid))
    else:
        asyncio.create_task(announce_basket_round(lid))

# --------------------------
# –ò–ì–†–ê: –ö–û–°–¢–ò (üé≤) ‚Äî —á–µ—Ä–µ–∑ send_dice –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
# --------------------------
async def announce_dice_round(lid: str):
    db = load_db()
    if lid not in db["lobbies"]:
        return
    lobby = db["lobbies"][lid]
    gs = lobby["game_state"]
    r = gs["current_round"]
    total = gs["rounds_total"]
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –±—Ä–æ—Å–∫–∞ –∏ –≤—ã—Ö–æ–¥–æ–º
    kb = InlineKeyboardBuilder()
    kb.button(text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data=f"dice_roll_{lid}")
    kb.button(text="üö™ –í—ã–π—Ç–∏ (—à—Ç—Ä–∞—Ñ -5)", callback_data=f"leave_in_game_{lid}")
    markup = kb.as_markup()
    tasks = []
    for pid in lobby["players"]:
        try:
            tasks.append(asyncio.create_task(bot.send_message(pid, f"–†–∞—É–Ω–¥ {r}/{total} ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫¬ª", reply_markup=markup)))
        except Exception:
            pass
    if tasks:
        await asyncio.gather(*tasks, return_exceptions=True)

@dp.callback_query(F.data.startswith("dice_roll_"))
async def cb_dice_roll(c: CallbackQuery):
    lid = c.data.split("_", 2)[2]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    lobby = db["lobbies"][lid]
    if not lobby.get("started", False):
        await c.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞", show_alert=True)
        return
    uid = c.from_user.id
    if uid not in lobby["players"]:
        await c.answer("–í—ã –Ω–µ –≤ —ç—Ç–æ–º –ª–æ–±–±–∏", show_alert=True)
        return
    gs = lobby["game_state"]
    r = gs["current_round"]
    rkey = str(r)
    if rkey not in gs["round_rolls"]:
        gs["round_rolls"][rkey] = {}
    if str(uid) in gs["round_rolls"][rkey]:
        await c.answer("–í—ã —É–∂–µ –±—Ä–æ—Å–∞–ª–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ", show_alert=True)
        return
    # –±—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ —á–µ—Ä–µ–∑ —ç–º–æ–¥–∑–∏ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–∏–º–∞—Ü–∏—é –∫—É–±–∏–∫–∞)
    msg = await bot.send_dice(uid, emoji="üé≤")
    value = msg.dice.value
    gs["round_rolls"][rkey][str(uid)] = value
    save_db(db)
    await c.answer(f"–í—ã –±—Ä–æ—Å–∏–ª–∏: {value}")
    # –µ—Å–ª–∏ –≤—Å–µ –±—Ä–æ—Å–∏–ª–∏ ‚Äî –ø–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    if len(gs["round_rolls"][rkey]) >= len(lobby["players"]):
        # –ø–æ–¥—Å—á—ë—Ç
        rolls = gs["round_rolls"][rkey]
        max_val = max(rolls.values())
        winners = [int(pid) for pid, v in rolls.items() if v == max_val]
        if len(winners) == 1:
            gs["match_scores"][str(winners[0])] += 1
            round_result = f"üèÜ –†–∞—É–Ω–¥ {r}: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî {load_db()['users'][str(winners[0])]['name']} ({max_val})"
        else:
            # –Ω–∏—á—å—è ‚Äî +1 –≤—Å–µ–º (–ø–æ –ø—Ä–∞–≤–∏–ª—É)
            for pid in winners:
                gs["match_scores"][str(pid)] += 1
            round_result = f"ü§ù –†–∞—É–Ω–¥ {r}: –Ω–∏—á—å—è! (–º–∞–∫—Å {max_val}) ‚Äî –≤—Å–µ–º +1"
        # –æ–±—â–∏–π —Å—á—ë—Ç
        score_text = "üî¢ –°—á—ë—Ç –º–∞—Ç—á–∞:\n"
        for p in lobby["players"]:
            score_text += f"- {load_db()['users'][str(p)]['name']}: {gs['match_scores'][str(p)]}\n"
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤—Å–µ–º
        summary = f"üé≤ –ü–æ–¥—Å—á—ë—Ç —Ä–∞—É–Ω–¥–∞ {r}:\n"
        for p_str, val in rolls.items():
            summary += f"- {load_db()['users'][p_str]['name']}: {val}\n"
        summary += f"\n{round_result}\n\n{score_text}"
        tasks = []
        for pid in lobby["players"]:
            try:
                tasks.append(asyncio.create_task(bot.send_message(pid, summary)))
            except Exception:
                pass
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
        # —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∏–ª–∏ –∫–æ–Ω–µ—Ü
        gs["current_round"] += 1
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        save_db(db)
        if gs["current_round"] > gs["rounds_total"]:
            # –∫–æ–Ω–µ—Ü –º–∞—Ç—á–∞
            await finish_dice_match(lid)
            return
        else:
            await asyncio.sleep(1)
            await announce_dice_round(lid)
    else:
        # –∂–¥—ë–º –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞...
        await c.answer("–í–∞—à –±—Ä–æ—Å–æ–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ñ–¥—ë–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...")

async def finish_dice_match(lid: str):
    db = load_db()
    if lid not in db["lobbies"]:
        return
    lobby = db["lobbies"][lid]
    gs = lobby["game_state"]
    ms = gs["match_scores"]
    # —Ä–µ—à–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–∞—Ç—á–∞
    players = lobby["players"]
    scores = {p: ms.get(str(p), 0) for p in players}
    # –Ω–∞–π–¥–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
    max_score = max(scores.values())
    winners = [p for p, s in scores.items() if s == max_score]
    if len(winners) == 1:
        winner = winners[0]
        add_win(winner, 1)
        result_text = f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞: {load_db()['users'][str(winner)]['name']} ‚Äî {max_score} –æ—á–∫–æ–≤"
    else:
        # –Ω–∏—á—å—è ‚Äî –¥–∞—ë–º –≤—Å–µ–º –ø–æ +1 –ø–æ–±–µ–¥–µ (–∫–∞–∫ –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö –æ–≥–æ–≤–æ—Ä–µ–Ω–æ –¥–ª—è –Ω–∏—á—å–∏—Ö)
        for p in winners:
            add_win(p, 1)
        names = ", ".join([load_db()['users'][str(p)]['name'] for p in winners])
        result_text = f"ü§ù –ù–∏—á—å—è –º–µ–∂–¥—É: {names}. –í—Å–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ +1 –ø–æ–±–µ–¥–∞"
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª
    final_scores_text = "–ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç:\n" + "\n".join([f"- {load_db()['users'][str(p)]['name']}: {scores[p]}" for p in players])
    tasks = []
    for pid in players:
        try:
            tasks.append(asyncio.create_task(bot.send_message(pid, f"{result_text}\n\n{final_scores_text}", reply_markup=kb_main())))
        except Exception:
            pass
    if tasks:
        await asyncio.gather(*tasks, return_exceptions=True)
    # —É–¥–∞–ª—è–µ–º –ª–æ–±–±–∏
    delete_lobby(lid)

# --------------------------
# –ò–ì–†–ê: –ë–ê–°–ö–ï–¢–ë–û–õ üèÄ
# --------------------------
async def announce_basket_round(lid: str):
    db = load_db()
    if lid not in db["lobbies"]:
        return
    lobby = db["lobbies"][lid]
    gs = lobby["game_state"]
    r = gs["round"]
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –ü–æ–ø—ã—Ç–∫–∞ –∏ –≤—ã—Ö–æ–¥
    kb = InlineKeyboardBuilder()
    kb.button(text="üèÄ –ü–æ–ø—ã—Ç–∫–∞", callback_data=f"basket_try_{lid}")
    kb.button(text="üö™ –í—ã–π—Ç–∏ (—à—Ç—Ä–∞—Ñ -5)", callback_data=f"leave_in_game_{lid}")
    markup = kb.as_markup()
    tasks = []
    for pid in lobby["players"]:
        try:
            tasks.append(asyncio.create_task(bot.send_message(pid, f"–†–∞—É–Ω–¥ {r}: –ù–∞–∂–º–∏—Ç–µ ¬´üèÄ –ü–æ–ø—ã—Ç–∫–∞¬ª ‚Äî —à–∞–Ω—Å –∑–∞–±—Ä–æ—Å–∞ {int(BASKET_HIT_PROB*100)}%", reply_markup=markup)))
        except Exception:
            pass
    if tasks:
        await asyncio.gather(*tasks, return_exceptions=True)

@dp.callback_query(F.data.startswith("basket_try_"))
async def cb_basket_try(c: CallbackQuery):
    lid = c.data.split("_", 2)[2]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    lobby = db["lobbies"][lid]
    if not lobby.get("started", False):
        await c.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞", show_alert=True)
        return
    uid = c.from_user.id
    if uid not in lobby["players"]:
        await c.answer("–í—ã –Ω–µ –≤ —ç—Ç–æ–º –ª–æ–±–±–∏", show_alert=True)
        return
    gs = lobby["game_state"]
    rkey = str(gs["round"])
    if rkey not in gs["round_tries"]:
        gs["round_tries"][rkey] = []
    if uid in gs["round_tries"][rkey]:
        await c.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø–æ–ø—ã—Ç–∫—É –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ", show_alert=True)
        return
    # –¥–µ–ª–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
    hit = random.random() < BASKET_HIT_PROB
    gs["round_tries"][rkey].append(uid)
    if hit:
        gs["match_scores"][str(uid)] += 1
        await c.answer("–ó–∞–∫–∏–Ω—É–ª! +1")
    else:
        await c.answer("–ú–∏–º–æ (0)")
    save_db(db)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    summary = f"–†–∞—É–Ω–¥ {gs['round']} ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç {load_db()['users'][str(uid)]['name']}:\n"
    summary += ("üèÄ –ó–ê–ë–†–û–®–ï–ù–û!\n" if hit else "‚ùå –ü–†–û–ú–ê–•\n")
    summary += "\n–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç:\n"
    for pid_str, pts in gs["match_scores"].items():
        summary += f"- {load_db()['users'][pid_str]['name']}: {pts}\n"
    tasks = []
    for pid in lobby["players"]:
        try:
            tasks.append(asyncio.create_task(bot.send_message(pid, summary)))
        except Exception:
            pass
    if tasks:
        await asyncio.gather(*tasks, return_exceptions=True)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
    winner = None
    for pid_str, pts in gs["match_scores"].items():
        if pts >= gs["goal_limit"]:
            winner = int(pid_str)
            break
    if winner:
        add_win(winner, 1)
        final = f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {load_db()['users'][str(winner)]['name']}!\n–ò—Ç–æ–≥:\n"
        final += "\n".join([f"- {load_db()['users'][k]['name']}: {v}" for k, v in gs["match_scores"].items()])
        tasks = []
        for pid in lobby["players"]:
            try:
                tasks.append(asyncio.create_task(bot.send_message(pid, final, reply_markup=kb_main())))
            except Exception:
                pass
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
        delete_lobby(lid)
        return
    # –µ—Å–ª–∏ –≤—Å–µ —Å–¥–µ–ª–∞–ª–∏ –ø–æ–ø—ã—Ç–∫—É ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
    if len(gs["round_tries"][rkey]) >= len(lobby["players"]):
        gs["round"] += 1
        save_db(db)
        await announce_basket_round(lid)
    # –∏–Ω–∞—á–µ –∂–¥—ë–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö

# --------------------------
# fallback ‚Äî –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
# --------------------------
@dp.message()
async def fallback(msg: Message):
    ensure_user(msg.from_user.id, msg.from_user.full_name)
    await msg.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é:", reply_markup=kb_main())

# --------------------------
# –ó–ê–ü–£–°–ö
# --------------------------
async def main():
    print("Bot starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped")
