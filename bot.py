# GameBot v0.4 ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º UI –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏–π
# –¢—Ä–µ–±—É–µ—Ç aiogram 3.7+
# DB: database.json (—Ä—è–¥–æ–º —Å —Ñ–∞–π–ª–æ–º)
# –í–ê–ñ–ù–û: –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –≤ TOKEN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!

import asyncio
import random
import json
import time
from pathlib import Path
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.bot import DefaultBotProperties

# --------------------------
# –ù–ê–°–¢–†–û–ô–ö–ò
# --------------------------
TOKEN = "8001643590:AAG93uhtCw-MwIOTXJkeGGOG7k7FjdSTeQM"  # <- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
DB_PATH = Path("database.json")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã
DICE_ROUNDS = 6

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç N —Å–µ–∫—É–Ω–¥
CONFIRM_TTL = 60  # 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–Ω–∞–∂–∞–≤ –µ—â—ë —Ä–∞–∑)

# --------------------------
# –ë–ê–ó–ê (JSON)
# --------------------------
def load_db() -> Dict[str, Any]:
    if not DB_PATH.exists():
        DB_PATH.write_text(json.dumps({
            "users": {},
            "lobbies": {},
            "pending_confirmations": {}
        }, ensure_ascii=False, indent=4), encoding="utf-8")
    data = json.loads(DB_PATH.read_text(encoding="utf-8"))
    changed = False
    if "pending_confirmations" not in data:
        data["pending_confirmations"] = {}
        changed = True
    for lid, lobby in data.get("lobbies", {}).items():
        if "last_messages" not in lobby:
            lobby["last_messages"] = {}
            changed = True
        if "last_activity" not in lobby:
            lobby["last_activity"] = time.time()
            changed = True
    if changed:
        save_db(data)
    return data

def save_db(data: Dict[str, Any]):
    DB_PATH.write_text(json.dumps(data, ensure_ascii=False, indent=4), encoding="utf-8")

# --------------------------
# –£–¢–ò–õ–ò–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# --------------------------
def ensure_user(uid: int, name: str):
    db = load_db()
    s = str(uid)
    if s not in db["users"]:
        db["users"][s] = {"name": name, "wins": 0}
        save_db(db)

def add_win(uid: int, amount: int = 1):
    db = load_db()
    s = str(uid)
    if s not in db["users"]:
        db["users"][s] = {"name": f"User {s}", "wins": 0}
    db["users"][s]["wins"] += amount
    save_db(db)

def user_label(uid: int) -> str:
    db = load_db()
    u = db["users"].get(str(uid), {"name": f"User {uid}", "wins": 0})
    return f"{u['name']} ({u['wins']})"

# --------------------------
# –õ–û–ë–ë–ò: —Å–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥
# --------------------------
def max_players(game: str) -> int:
    return 2  # –¥–ª—è –ö–æ—Å—Ç–µ–π

def min_players(game: str) -> int:
    return 2

def new_lobby_id() -> str:
    db = load_db()
    while True:
        lid = str(random.randint(100000, 999999))
        if lid not in db["lobbies"]:
            return lid

def create_lobby_record(game: str, creator_uid: int) -> str:
    db = load_db()
    lid = new_lobby_id()
    db["lobbies"][lid] = {
        "game": game,
        "creator": creator_uid,
        "players": [creator_uid],
        "started": False,
        "game_state": {},
        "last_messages": {},   # {uid_str: message_id}
        "last_activity": time.time()
    }
    save_db(db)
    return lid

def join_lobby(lid: str, uid: int) -> (bool, str):
    db = load_db()
    if lid not in db["lobbies"]:
        return False, "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    lobby = db["lobbies"][lid]
    if lobby["started"]:
        return False, "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å"
    if uid in lobby["players"]:
        return False, "–í—ã —É–∂–µ –≤ –ª–æ–±–±–∏"
    if len(lobby["players"]) >= max_players(lobby["game"]):
        return False, "–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
    lobby["players"].append(uid)
    lobby["last_activity"] = time.time()
    save_db(db)
    return True, "–£—Å–ø–µ—à–Ω–æ"

def leave_lobby(lid: str, uid: int, penalize_if_started: bool = False) -> (bool, str):
    db = load_db()
    if lid not in db["lobbies"]:
        return False, "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    lobby = db["lobbies"][lid]
    if uid in lobby["players"]:
        lobby["players"].remove(uid)
    if penalize_if_started and lobby.get("started", False):
        add_win(uid, -5)
    # —É–¥–∞–ª–∏–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        lobby["last_messages"].pop(str(uid), None)
    except Exception:
        pass
    # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —É–¥–∞–ª—è–µ–º –ª–æ–±–±–∏
    if len(lobby["players"]) == 0:
        del db["lobbies"][lid]
    else:
        lobby["last_activity"] = time.time()
    save_db(db)
    return True, "–í—ã—à–ª–∏"

def kick_from_lobby(lid: str, by_uid: int, target_uid: int) -> (bool, str):
    db = load_db()
    if lid not in db["lobbies"]:
        return False, "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    lobby = db["lobbies"][lid]
    if lobby["creator"] != by_uid:
        return False, "–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–∫–∏–¥—ã–≤–∞—Ç—å"
    if target_uid not in lobby["players"]:
        return False, "–ò–≥—Ä–æ–∫ –Ω–µ –≤ –ª–æ–±–±–∏"
    lobby["players"].remove(target_uid)
    lobby["last_messages"].pop(str(target_uid), None)
    lobby["last_activity"] = time.time()
    # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —É–¥–∞–ª—è–µ–º –ª–æ–±–±–∏
    if len(lobby["players"]) == 0:
        del db["lobbies"][lid]
    save_db(db)
    return True, "–í—ã–≥–Ω–∞–Ω"

def delete_lobby(lid: str):
    db = load_db()
    if lid in db["lobbies"]:
        del db["lobbies"][lid]
        save_db(db)

def user_active_created_lobby(uid: int) -> Optional[str]:
    db = load_db()
    for lid, lobby in db["lobbies"].items():
        if lobby.get("creator") == uid:
            return lid
    return None

# --------------------------
# UI / —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------
def format_players_list(lobby: Dict[str, Any]) -> str:
    db = load_db()
    lines = []
    for p in lobby["players"]:
        user = db["users"].get(str(p), {"name": f"User {p}", "wins": 0})
        prefix = "üëë " if p == lobby["creator"] else "‚Ä¢ "
        lines.append(f"{prefix}{user['name']}")
    return "\n".join(lines)

def lobby_overview_text(lid: str, lobby: Dict[str, Any], extra: Optional[str] = None) -> str:
    """
    –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ª–æ–±–±–∏.
    extra ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞/–±–ª–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±—Ä–æ—Å–∏—Ç—å –≤ —Ä–∞—É–Ω–¥–µ)
    """
    db = load_db()
    creator_name = db["users"].get(str(lobby["creator"]), {"name": "Unknown"})["name"]
    text = (
        f"üé≤ <b>–õ–æ–±–±–∏ {lid}</b>\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: üëë <b>{creator_name}</b>\n\n"
        f"<b>–ò–≥—Ä–æ–∫–∏ ({len(lobby['players'])}/{max_players(lobby['game'])}):</b>\n"
        f"{format_players_list(lobby)}"
    )
    if not lobby.get("started", False):
        text += "\n\n‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–∞ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è."
    else:
        text += "\n\n‚úÖ –ò–≥—Ä–∞ –∏–¥—ë—Ç."
    if extra:
        text += f"\n\n{extra}"
    return text

# --------------------------
# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ)
# --------------------------
def kb_main():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ò–≥—Ä–∞—Ç—å üéÆ", callback_data="play")
    kb.button(text="–¢–æ–ø üèÜ", callback_data="leaders")
    return kb.as_markup()

def kb_play():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_game")
    kb.button(text="üîé –ù–∞–π—Ç–∏", callback_data="join_game")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    return kb.as_markup()

def kb_create_exists(lid: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚§¥Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–æ—ë –ª–æ–±–±–∏", callback_data=f"view_{lid}")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å –º–æ—ë –ª–æ–±–±–∏", callback_data=f"confirm_delete_{lid}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
    return kb.as_markup()

def kb_game_types():
    kb = InlineKeyboardBuilder()
    kb.button(text="üé≤ –ö–æ—Å—Ç–∏", callback_data="create_dice")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
    return kb.as_markup()

def kb_lobby_actions(lid: str, uid: int, in_round: bool = False):
    """
    in_round=True –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –±—Ä–æ—Å–∫–∞
    """
    db = load_db()
    kb = InlineKeyboardBuilder()
    lobby = db["lobbies"].get(lid)
    if not lobby:
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
        return kb.as_markup()
    if not lobby.get("started", False):
        if uid in lobby["players"]:
            kb.button(text="–í—ã–π—Ç–∏ üö™", callback_data=f"leave_{lid}")
        if uid == lobby["creator"]:
            kb.button(text="–ù–∞—á–∞—Ç—å üöÄ", callback_data=f"start_{lid}")
            kb.button(text="–£–ø—Ä–∞–≤–ª—è—Ç—å ‚öôÔ∏è", callback_data=f"manage_{lid}")
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
    else:
        if in_round:
            kb.button(text="üé≤ –ë—Ä–æ—Å–∏—Ç—å", callback_data=f"dice_roll_{lid}")
        else:
            kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
        kb.button(text="–í—ã–π—Ç–∏ (-5) üö™", callback_data=f"leave_in_game_{lid}")
    return kb.as_markup()

def kb_confirm_delete(lid: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="–£–¥–∞–ª–∏—Ç—å –ª–æ–±–±–∏ üî•", callback_data=f"delete_{lid}")
    kb.button(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"view_{lid}")
    return kb.as_markup()

# --------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# --------------------------
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ª–æ–±–±–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
# --------------------------
async def set_last_message(lid: str, uid: int, message_id: int):
    db = load_db()
    if lid not in db["lobbies"]:
        return
    db["lobbies"][lid]["last_messages"][str(uid)] = message_id
    db["lobbies"][lid]["last_activity"] = time.time()
    save_db(db)

async def remove_last_message_record(lid: str, uid: int):
    db = load_db()
    if lid not in db["lobbies"]:
        return
    db["lobbies"][lid]["last_messages"].pop(str(uid), None)
    db["lobbies"][lid]["last_activity"] = time.time()
    save_db(db)

async def safe_delete_message(chat_id: int, message_id: int):
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é / –∑–∞–ø—Ä–µ—Ç)
        pass

async def update_lobby_card_for_user(lid: str, uid: int, in_round: bool = False, extra: Optional[str] = None):
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ª–æ–±–±–∏.
    –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é ‚Äî –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é.
    """
    db = load_db()
    if lid not in db["lobbies"]:
        return
    lobby = db["lobbies"][lid]
    overview = lobby_overview_text(lid, lobby, extra=extra)
    markup = kb_lobby_actions(lid, uid, in_round=in_round)
    uid_str = str(uid)
    prev_mid = lobby.get("last_messages", {}).get(uid_str)
    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if prev_mid:
        try:
            await bot.edit_message_text(overview, chat_id=uid, message_id=int(prev_mid), reply_markup=markup)
            # —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ ‚Äî –æ–±–Ω–æ–≤–∏–º activity
            lobby["last_activity"] = time.time()
            save_db(db)
            return
        except Exception:
            # –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
            try:
                await safe_delete_message(uid, int(prev_mid))
            except Exception:
                pass
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        msg = await bot.send_message(uid, overview, reply_markup=markup)
        await set_last_message(lid, uid, msg.message_id)
    except Exception:
        # –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —á–∞—Ç —Å –±–æ—Ç–æ–º) ‚Äî —É–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å—å
        await remove_last_message_record(lid, uid)

async def update_all_lobby_cards(lid: str, in_round: bool = False, extra: Optional[str] = None):
    db = load_db()
    if lid not in db["lobbies"]:
        return
    lobby = db["lobbies"][lid]
    tasks = []
    for pid in list(lobby["players"]):
        tasks.append(asyncio.create_task(update_lobby_card_for_user(lid, pid, in_round=in_round, extra=extra)))
    if tasks:
        await asyncio.gather(*tasks, return_exceptions=True)

# --------------------------
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (pending confirmations)
# --------------------------
def add_pending_confirmation(uid: int, action: str, lid: str):
    db = load_db()
    db["pending_confirmations"][str(uid)] = {
        "action": action,
        "lid": lid,
        "expires": time.time() + CONFIRM_TTL
    }
    save_db(db)

def pop_pending_confirmation(uid: int) -> Optional[Dict[str, Any]]:
    db = load_db()
    s = str(uid)
    info = db["pending_confirmations"].get(s)
    if not info:
        return None
    if info.get("expires", 0) < time.time():
        # –∏—Å—Ç–µ–∫–ª–æ
        db["pending_confirmations"].pop(s, None)
        save_db(db)
        return None
    # —É–¥–∞–ª–∏–º –∏ –≤–µ—Ä–Ω—ë–º
    db["pending_confirmations"].pop(s, None)
    save_db(db)
    return info

def peek_pending_confirmation(uid: int) -> Optional[Dict[str, Any]]:
    db = load_db()
    s = str(uid)
    info = db["pending_confirmations"].get(s)
    if not info:
        return None
    if info.get("expires", 0) < time.time():
        db["pending_confirmations"].pop(s, None)
        save_db(db)
        return None
    return info

# --------------------------
# –ú–µ–Ω—é –∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã
# --------------------------
@dp.message(F.text == "/start")
async def cmd_start(msg: Message):
    ensure_user(msg.from_user.id, msg.from_user.full_name)
    await msg.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{msg.from_user.full_name}</b>! –Ø ‚Äî —Ç–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. üé≤\n–í—ã–±–∏—Ä–∞–π:", reply_markup=kb_main())

@dp.callback_query(F.data == "back_main")
async def cb_back_main(c: CallbackQuery):
    await c.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main())

@dp.callback_query(F.data == "play")
async def cb_play(c: CallbackQuery):
    await c.message.edit_text("üéÆ –ú–µ–Ω—é ‚Äî –∏–≥—Ä–∞—Ç—å:", reply_markup=kb_play())

@dp.callback_query(F.data == "create_game")
async def cb_create_game(c: CallbackQuery):
    ensure_user(c.from_user.id, c.from_user.full_name)
    existing = user_active_created_lobby(c.from_user.id)
    if existing:
        await c.message.edit_text("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–±–±–∏:", reply_markup=kb_create_exists(existing))
        return
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=kb_game_types())

@dp.callback_query(F.data == "leaders")
async def cb_leaders(c: CallbackQuery):
    db = load_db()
    users = list(db["users"].items())
    users.sort(key=lambda x: x[1]["wins"], reverse=True)
    text = "<b>üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤</b>\n\n"
    if not users:
        text += "–ü–æ–∫–∞ –ø—É—Å—Ç–æ ‚Äî —Å—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–∞—Ä—Ç–∏—é!"
    else:
        for i, (uid, info) in enumerate(users[:20], 1):
            text += f"{i}. {info['name']} ‚Äî {info['wins']} –ø–æ–±–µ–¥\n"
    await c.message.edit_text(text, reply_markup=kb_main())

# --------------------------
# CREATE LOBBY (–ö–æ—Å—Ç–∏)
# --------------------------
@dp.callback_query(F.data == "create_dice")
async def cb_create_dice(c: CallbackQuery):
    ensure_user(c.from_user.id, c.from_user.full_name)
    existing = user_active_created_lobby(c.from_user.id)
    if existing:
        await c.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–±–±–∏", show_alert=True)
        await c.message.edit_text("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ª–æ–±–±–∏:", reply_markup=kb_create_exists(existing))
        return
    lid = create_lobby_record("dice", c.from_user.id)
    # –û—Ç–ø—Ä–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏ –∑–∞–ø–æ–º–Ω–∏–º message_id
    try:
        msg = await bot.send_message(c.from_user.id, lobby_overview_text(lid, load_db()["lobbies"][lid]), reply_markup=kb_lobby_actions(lid, c.from_user.id))
        await set_last_message(lid, c.from_user.id, msg.message_id)
    except Exception:
        pass
    await c.message.edit_text(f"‚úÖ –õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ ‚Äî <b>–ö–æ—Å—Ç–∏ üé≤</b>\nüÜî <code>{lid}</code>\n–õ–æ–±–±–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=kb_lobby_actions(lid, c.from_user.id))

# --------------------------
# JOIN: —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
# --------------------------
@dp.callback_query(F.data == "join_game")
async def cb_list_lobbies(c: CallbackQuery):
    db = load_db()
    text_lines = ["üîé <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–±–±–∏</b>:\n"]
    kb = InlineKeyboardBuilder()
    found = False
    for lid, lobby in db["lobbies"].items():
        if lobby.get("started", False):
            continue
        found = True
        text_lines.append(f"üÜî {lid} | üé≤ | ({len(lobby['players'])}/{max_players(lobby['game'])})")
        kb.button(text=f"‚û°Ô∏è –í–æ–π—Ç–∏ {lid}", callback_data=f"join_{lid}")
    if not found:
        text_lines.append("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–±–±–∏")
        await c.message.edit_text("\n".join(text_lines), reply_markup=kb_play())
        return
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="play")
    await c.message.edit_text("\n".join(text_lines), reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("join_"))
async def cb_join_specific(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    ensure_user(c.from_user.id, c.from_user.full_name)
    ok, reason = join_lobby(lid, c.from_user.id)
    if not ok:
        await c.answer(reason, show_alert=True)
        await c.message.edit_text(reason, reply_markup=kb_play())
        return

    # –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º message_id
    db = load_db()
    lobby = db["lobbies"][lid]
    try:
        msg = await bot.send_message(c.from_user.id, lobby_overview_text(lid, lobby), reply_markup=kb_lobby_actions(lid, c.from_user.id))
        await set_last_message(lid, c.from_user.id, msg.message_id)
    except Exception:
        pass

    # —Å–æ–æ–±—â–∏–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (–∫–æ—Ä–æ—Ç–∫–æ) –∏ –æ–±–Ω–æ–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—Å–µ—Ö ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/–∑–∞–º–µ—â–µ–Ω–∏–µ
    await c.message.edit_text("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ –ª–æ–±–±–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=kb_main())
    await update_all_lobby_cards(lid)

# --------------------------
# –£–ü–†–ê–í–õ–ï–ù–ò–ï/–í–´–•–û–î/–í–´–ì–û–ù (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
# --------------------------
@dp.callback_query(F.data.startswith("leave_in_game_"))
async def cb_leave_in_game(c: CallbackQuery):
    # –≤—Ç–æ—Ä–æ–π —Å–ª—É—á–∞–π ‚Äî –≤—ã—Ö–æ–¥ –≤ —Ö–æ–¥–µ –∏–≥—Ä—ã (—à—Ç—Ä–∞—Ñ)
    lid = c.data.split("_", 3)[3]
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    pending = peek_pending_confirmation(c.from_user.id)
    if not pending or pending.get("action") != "leave_in_game" or pending.get("lid") != lid:
        # —Å—Ç–∞–≤–∏–º pending –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (alert)
        add_pending_confirmation(c.from_user.id, "leave_in_game", lid)
        await c.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã—Ö–æ–¥: –Ω–∞–∂–º–∏—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å.", show_alert=True)
        return
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ ‚Äî —É–¥–∞–ª—è–µ–º pending –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º
    pop_pending_confirmation(c.from_user.id)
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await c.message.edit_text("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=kb_main())
        return
    # —à—Ç—Ä–∞—Ñ -5
    add_win(c.from_user.id, -5)
    leave_lobby(lid, c.from_user.id, penalize_if_started=False)
    # —É–≤–µ–¥–æ–º–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏ —É–¥–∞–ª–∏–º –ª–æ–±–±–∏ (—Ç–∞–∫ –∫–∞–∫ –º–∞—Ç—á –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è)
    db = load_db()
    if lid in db["lobbies"]:
        lobby = db["lobbies"][lid]
        msg = f"‚ö†Ô∏è {db['users'].get(str(c.from_user.id), {'name':'–ò–≥—Ä–æ–∫'})['name']} –≤—ã—à–µ–ª ‚Äî –º–∞—Ç—á –ø—Ä–µ—Ä–≤–∞–Ω."
        tasks = []
        for pid in list(lobby["players"]):
            try:
                tasks.append(asyncio.create_task(bot.send_message(pid, msg, reply_markup=kb_main())))
            except Exception:
                pass
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
        delete_lobby(lid)
    # —É–¥–∞–ª–∏–º –∫–∞—Ä—Ç–æ—á–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        # –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏—Ö last_message
        db2 = load_db()
        if lid in db2["lobbies"]:
            # –µ—Å–ª–∏ –µ—â—ë –µ—Å—Ç—å ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ handled above; –∏–Ω–∞—á–µ —ç—Ç–æ ok
            pass
    except Exception:
        pass
    await c.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—Ç—á–∞. -5 –ø–æ–±–µ–¥", show_alert=False)
    await c.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—Ç—á–∞. -5 –ø–æ–±–µ–¥", reply_markup=kb_main())

@dp.callback_query(F.data.startswith("leave_"))
async def cb_leave(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    # pending confirm pattern
    pending = peek_pending_confirmation(c.from_user.id)
    if not pending or pending.get("action") != "leave" or pending.get("lid") != lid:
        add_pending_confirmation(c.from_user.id, "leave", lid)
        await c.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã—Ö–æ–¥: –Ω–∞–∂–º–∏—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å.", show_alert=True)
        return
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    pop_pending_confirmation(c.from_user.id)
    ok, reason = leave_lobby(lid, c.from_user.id, penalize_if_started=False)
    if ok:
        # —É–¥–∞–ª–∏–º –ª–∏—á–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            # –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å message
            db = load_db()
            lobby = db.get("lobbies", {}).get(lid)
            # –µ—Å–ª–∏ –ª–æ–±–±–∏ —É–¥–∞–ª–µ–Ω–æ, –≤–æ–∑–º–æ–∂–µ–Ω KeyError ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            # —É–¥–∞–ª–µ–Ω–∏–µ –∏—Ö last_message —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ leave_lobby
            pass
        except Exception:
            pass
        await update_all_lobby_cards(lid)
        await c.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏", show_alert=False)
        await c.message.edit_text("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=kb_main())
    else:
        await c.answer(reason, show_alert=True)

@dp.callback_query(F.data.startswith("manage_"))
async def cb_manage(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    lobby = db["lobbies"][lid]
    if c.from_user.id != lobby["creator"]:
        await c.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    for p in lobby["players"]:
        if p == lobby["creator"]:
            continue
        name = db["users"].get(str(p), {"name": f"User {p}"})["name"]
        kb.button(text=f"–í—ã–≥–Ω–∞—Ç—å {name}", callback_data=f"kick_{lid}_{p}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_{lid}")
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("kick_"))
async def cb_kick(c: CallbackQuery):
    _, lid, pid_str = c.data.split("_", 2)
    pid = int(pid_str)
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è kick
    pending = peek_pending_confirmation(c.from_user.id)
    if not pending or pending.get("action") != f"kick_{pid}" or pending.get("lid") != lid:
        add_pending_confirmation(c.from_user.id, f"kick_{pid}", lid)
        await c.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å.", show_alert=True)
        return
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ
    pop_pending_confirmation(c.from_user.id)
    ok, reason = kick_from_lobby(lid, c.from_user.id, pid)
    if ok:
        try:
            await bot.send_message(pid, f"–í–∞—Å –≤—ã–≥–Ω–∞–ª–∏ –∏–∑ –ª–æ–±–±–∏ {lid}.", reply_markup=kb_main())
        except Exception:
            pass
        await update_all_lobby_cards(lid)
        await c.answer("–ò–≥—Ä–æ–∫ –≤—ã–≥–Ω–∞–Ω")
        await c.message.edit_text("–ò–≥—Ä–æ–∫ –≤—ã–≥–Ω–∞–Ω.", reply_markup=kb_play())
    else:
        await c.answer(reason, show_alert=True)

@dp.callback_query(F.data.startswith("view_"))
async def cb_view(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await c.message.edit_text("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_play())
        return
    lobby = db["lobbies"][lid]
    await c.message.edit_text(lobby_overview_text(lid, lobby), reply_markup=kb_lobby_actions(lid, c.from_user.id))

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def cb_confirm_delete(c: CallbackQuery):
    lid = c.data.split("_", 2)[2]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await c.message.edit_text("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=kb_play())
        return
    lobby = db["lobbies"][lid]
    if c.from_user.id != lobby["creator"]:
        await c.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å", show_alert=True)
        return
    await c.message.edit_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–±–±–∏:", reply_markup=kb_confirm_delete(lid))

@dp.callback_query(F.data.startswith("delete_"))
async def cb_delete(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        await c.message.edit_text("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=kb_play())
        return
    lobby = db["lobbies"][lid]
    if c.from_user.id != lobby["creator"]:
        await c.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å", show_alert=True)
        return
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pending
    pending = peek_pending_confirmation(c.from_user.id)
    if not pending or pending.get("action") != "delete" or pending.get("lid") != lid:
        add_pending_confirmation(c.from_user.id, "delete", lid)
        await c.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ: –Ω–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å.", show_alert=True)
        return
    pop_pending_confirmation(c.from_user.id)
    # —É–≤–µ–¥–æ–º–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    tasks = []
    text = f"üóë –õ–æ–±–±–∏ {lid} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º."
    for pid in list(lobby["players"]):
        try:
            tasks.append(asyncio.create_task(bot.send_message(pid, text, reply_markup=kb_main())))
        except Exception:
            pass
    delete_lobby(lid)
    if tasks:
        await asyncio.gather(*tasks, return_exceptions=True)
    await c.message.edit_text("–õ–æ–±–±–∏ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=kb_main())

# --------------------------
# –°–¢–ê–†–¢ –ò–ì–†–´
# --------------------------
@dp.callback_query(F.data.startswith("start_"))
async def cb_start_game(c: CallbackQuery):
    lid = c.data.split("_", 1)[1]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    lobby = db["lobbies"][lid]
    if c.from_user.id != lobby["creator"]:
        await c.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å", show_alert=True)
        return
    if len(lobby["players"]) < min_players(lobby["game"]):
        await c.answer(f"–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min_players(lobby['game'])} –∏–≥—Ä–æ–∫–æ–≤", show_alert=True)
        return
    if len(lobby["players"]) > max_players(lobby["game"]):
        await c.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã", show_alert=True)
        return
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    lobby["started"] = True
    lobby["game_state"] = {
        "current_round": 1,
        "rounds_total": DICE_ROUNDS,
        "round_rolls": {},        # {round: {uid: value}}
        "match_scores": {str(p): 0 for p in lobby["players"]}
    }
    lobby["last_activity"] = time.time()
    save_db(db)
    # –æ–±–Ω–æ–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ —É –≤—Å–µ—Ö, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –±—Ä–æ—Å–∫—É
    await update_all_lobby_cards(lid, in_round=True, extra=f"<b>–†–∞—É–Ω–¥ 1/{DICE_ROUNDS}</b>\n–ù–∞–∂–º–∏—Ç–µ ¬´üé≤ –ë—Ä–æ—Å–∏—Ç—å¬ª")
    # –∏–≥—Ä–∞
    asyncio.create_task(announce_dice_round(lid))

# --------------------------
# –ò–ì–†–ê: –ö–û–°–¢–ò
# --------------------------
async def announce_dice_round(lid: str):
    """
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ª–æ–±–±–∏ —É –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ–±—ã –æ–Ω–∏ –≤–∏–¥–µ–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    –∏ –∫–Ω–æ–ø–∫—É ¬´üé≤ –ë—Ä–æ—Å–∏—Ç—å¬ª ‚Äî —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ "–ª–∏—à–Ω–∏–µ" —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    db = load_db()
    if lid not in db["lobbies"]:
        return
    lobby = db["lobbies"][lid]
    gs = lobby["game_state"]
    r = gs["current_round"]
    total = gs["rounds_total"]
    extra = f"<b>–†–∞—É–Ω–¥ {r}/{total}</b>\n–ù–∞–∂–º–∏—Ç–µ ¬´üé≤ –ë—Ä–æ—Å–∏—Ç—å¬ª"
    await update_all_lobby_cards(lid, in_round=True, extra=extra)

@dp.callback_query(F.data.startswith("dice_roll_"))
async def cb_dice_roll(c: CallbackQuery):
    lid = c.data.split("_", 2)[2]
    db = load_db()
    if lid not in db["lobbies"]:
        await c.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    lobby = db["lobbies"][lid]
    if not lobby.get("started", False):
        await c.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞", show_alert=True)
        return
    uid = c.from_user.id
    if uid not in lobby["players"]:
        await c.answer("–í—ã –Ω–µ –≤ —ç—Ç–æ–º –ª–æ–±–±–∏", show_alert=True)
        return
    gs = lobby["game_state"]
    r = gs["current_round"]
    rkey = str(r)
    if rkey not in gs["round_rolls"]:
        gs["round_rolls"][rkey] = {}
    if str(uid) in gs["round_rolls"][rkey]:
        await c.answer("–í—ã —É–∂–µ –±—Ä–æ—Å–∞–ª–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ", show_alert=True)
        return
    # –±—Ä–æ—Å–æ–∫: –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ send_dice (–∞–Ω–∏–º–∞—Ü–∏—è), –Ω–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è ‚Äî fallback random
    try:
        msg = await bot.send_dice(uid, emoji="üé≤")
        value = msg.dice.value
    except Exception:
        value = random.randint(1, 6)
    gs["round_rolls"][rkey][str(uid)] = value
    lobby["last_activity"] = time.time()
    save_db(db)
    await c.answer(f"–í—ã –±—Ä–æ—Å–∏–ª–∏: {value}", show_alert=False)
    # –µ—Å–ª–∏ –≤—Å–µ –±—Ä–æ—Å–∏–ª–∏ ‚Äî –ø–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ (–∏ —Å–Ω–æ–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, –∞ –Ω–µ —Å–æ–∑–¥–∞—ë–º —Ç–æ–Ω–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π)
    if len(gs["round_rolls"][rkey]) >= len(lobby["players"]):
        rolls = gs["round_rolls"][rkey]
        max_val = max(rolls.values())
        winners = [int(pid) for pid, v in rolls.items() if v == max_val]
        if len(winners) == 1:
            gs["match_scores"][str(winners[0])] += 1
            round_result = f"üèÜ –†–∞—É–Ω–¥ {r}: –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî {load_db()['users'][str(winners[0])]['name']} ({max_val})"
        else:
            for pid in winners:
                gs["match_scores"][str(pid)] += 1
            round_result = f"ü§ù –†–∞—É–Ω–¥ {r}: –Ω–∏—á—å—è! (–º–∞–∫—Å {max_val}) ‚Äî +1 –≤—Å–µ–º"
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –∏—Ç–æ–≥ —Ä–∞—É–Ω–¥–∞ (–∫–æ—Ä–æ—Ç–∫–æ) –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ (—á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–∏)
        score_text = "üî¢ –°—á—ë—Ç:\n"
        for p in lobby["players"]:
            score_text += f"- {load_db()['users'][str(p)]['name']}: {gs['match_scores'][str(p)]}\n"
        # –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ (extra)
        extra = f"–†–∞—É–Ω–¥ {r} –∑–∞–≤–µ—Ä—à—ë–Ω.\n{round_result}\n\n{score_text}"
        await update_all_lobby_cards(lid, in_round=False, extra=extra)
        # —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∏–ª–∏ –∫–æ–Ω–µ—Ü
        gs["current_round"] += 1
        lobby["last_activity"] = time.time()
        save_db(db)
        if gs["current_round"] > gs["rounds_total"]:
            await finish_dice_match(lid)
            return
        else:
            # –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞—É–Ω–¥–æ–º, –∑–∞—Ç–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
            await asyncio.sleep(1)
            await announce_dice_round(lid)
    else:
        await c.answer("–í–∞—à –±—Ä–æ—Å–æ–∫ –ø—Ä–∏–Ω—è—Ç. –ñ–¥—ë–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.", show_alert=False)

async def finish_dice_match(lid: str):
    db = load_db()
    if lid not in db["lobbies"]:
        return
    lobby = db["lobbies"][lid]
    gs = lobby["game_state"]
    ms = gs["match_scores"]
    players = lobby["players"]
    scores = {p: ms.get(str(p), 0) for p in players}
    max_score = max(scores.values()) if scores else 0
    winners = [p for p, s in scores.items() if s == max_score]
    if len(winners) == 1:
        winner = winners[0]
        add_win(winner, 1)
        result_text = f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞: {load_db()['users'][str(winner)]['name']} ‚Äî {max_score} –æ—á–∫–æ–≤"
    else:
        for p in winners:
            add_win(p, 1)
        names = ", ".join([load_db()['users'][str(p)]['name'] for p in winners])
        result_text = f"ü§ù –ù–∏—á—å—è –º–µ–∂–¥—É: {names}. –í—Å–µ–º +1 –ø–æ–±–µ–¥–∞"
    final_scores_text = "–ò—Ç–æ–≥:\n" + "\n".join([f"- {load_db()['users'][str(p)]['name']}: {scores[p]}" for p in players])
    # –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–∏–Ω–∞–ª –∫—Ä–∞—Ç–∫–æ –∫–∞–∂–¥–æ–º—É —á–µ—Ä–µ–∑ –∏—Ö –∫–∞—Ä—Ç–æ—á–∫—É (–∏ —Å–±—Ä–æ—Å–∏–º/—É–¥–∞–ª–∏–º –ª–æ–±–±–∏)
    tasks = []
    for pid in players:
        try:
            # –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ª–∏—á–Ω–æ) ‚Äî –Ω–æ –Ω–µ –º–µ—à–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∞–º
            tasks.append(asyncio.create_task(bot.send_message(pid, f"{result_text}\n\n{final_scores_text}", reply_markup=kb_main())))
        except Exception:
            pass
    if tasks:
        await asyncio.gather(*tasks, return_exceptions=True)
    # —É–¥–∞–ª—è–µ–º –ª–æ–±–±–∏ ‚Äî –≤—Å—ë —á–∏—Å—Ç–æ
    delete_lobby(lid)

# --------------------------
# fallback ‚Äî –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
# --------------------------
@dp.message()
async def fallback(msg: Message):
    ensure_user(msg.from_user.id, msg.from_user.full_name)
    await msg.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é:", reply_markup=kb_main())

# --------------------------
# –ó–∞–ø—É—Å–∫
# --------------------------
async def main():
    print("Bot starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped")
